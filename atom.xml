<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[PhiLhoSoft Technical Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://PhiLhoSoft.github.io/"/>
  <updated>2015-12-19T08:16:00.000Z</updated>
  <id>http://PhiLhoSoft.github.io/</id>
  
  <author>
    <name><![CDATA[Philippe Lhoste (PhiLho)]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[GitHub Atom review]]></title>
    <link href="http://PhiLhoSoft.github.io/Software/GitHub%20Atom%20review/"/>
    <id>http://PhiLhoSoft.github.io/Software/GitHub Atom review/</id>
    <published>2015-12-15T09:40:00.000Z</published>
    <updated>2015-12-19T08:16:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="github-atom-review">GitHub Atom review</h1>
<p>&#x201C;A hackable text editor for the 21st Century&#x201D;</p>
<p><a href="https://atom.io/">https://atom.io/</a></p>
<h2 id="disclaimer">Disclaimer</h2>
<p>I came to Atom with a prejudice&#x2026;<br>
The long closed-source / beta period, the fact the &#x201C;hackable&#x201D; editor isn&#x2019;t coded in JavaScript but in CoffeeScript, the need for plugins for everything (according to some reviews), the reported slowness and memory hungriness, made me to hesitate to try it&#x2026; I was also a happy user of Adobe Brackets, with no compeling need to change.<br>
But, Brackets accumulated a number of little annoyances, making me to try other editors.<br>
The test of Visual Studio Code was brief, as it didn&#x2019;t have the base (semi-advanced if you want) features I use all the time: drag&#x2019;n&#x2019;drop of code, and column selection.<br>
So I tested Atom, with a critical eye. Spoiler: I was seducted, and it becomes my favorite Web IDE&#x2026;</p>
<a id="more"></a>
<h2 id="quick-review">Quick review</h2>
<p>I downloaded the installer. It is big! Of the IDEs I tried, it is among the biggest:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Version</th>
<th>Size</th>
</tr>
</thead>
<tbody>
<tr>
<td>Brackets</td>
<td>1.5</td>
<td>37 MB</td>
</tr>
<tr>
<td>Visual Studio Code</td>
<td>0.10.3</td>
<td>43 MB</td>
</tr>
<tr>
<td>Light Table</td>
<td>0.7.2</td>
<td>48 MB</td>
</tr>
<tr>
<td>Atom</td>
<td>1.3.1</td>
<td>88 MB</td>
</tr>
<tr>
<td>WebStorm</td>
<td>9</td>
<td>140MB</td>
</tr>
</tbody>
</table>
<p>I installed Atom (v. 1.3.1 on Windows 7 with 8 GB of memory).<br>
It doesn&#x2019;t ask where to install, it goes arbitrarily at C:\Users&lt;user name&gt;\AppData\Local\atom. I would prefer to install it beside my other programs, to locale it easily. And I would appreciate it asks me before installing something on the desktop (I have no icons there!) or on the start menu (I no longer care about this one, but still&#x2026;).<br>
It is a bit &#x201C;all over the place&#x201D;, as it also has a C:\Users&lt;user name&gt;C:\Users\plhoste.atom\AppData\Roaming\Atom folder (for cache?), and a C:\Users&lt;user name&gt;.atom folder (settings, packages&#x2026;).</p>
<p>I opened it, it starts quickly (at least as second load, after the initial one after install).<br>
It has a dark UI, which I don&#x2019;t like, but I quickly found where to change this to the default light theme. Good point than several themes are bundled by default: no need to hunt for them. The default light UI theme is rather nice. I also chose the One Light syntax theme among four. A bit too pale (low contrast) for my taste, I will eventually see if I can tweak it.</p>
<p>As I feared (I searched a bit before, given the Visual Studio Code deception), drag&#x2019;n&#x2019;drop of code isn&#x2019;t available out of the box. Actually, I saw several plugins activating it. That&#x2019;s one of the problems with this editor: there is a plethora of plugins, which can be nice, but it is confusing to choose one&#x2026; And I still think such feature should be built-in in the editor.<br>
Same for column (rectangular) selections! Later, I found out Atom supports out of the box column selection (Alt+Up / Down, extend only, allows rectangular selection with Shift+Left / Right) and multiple carets (Ctrl+click).<br>
I find a bit unsettling to have to install lot of plugins to get base editor features. I have the same issue with Brackets, but it has at least these two features built-in (but D&#x2019;n&#x2019;D must be activated by a setting).<br>
That said, I found several features out of the box for which I had to install a plugin in Brackets:</p>
<ul>
<li>Jump to matching brace / bracket</li>
<li>Gutter selection<br>
And finally, Atom has more base features out of the box.</li>
</ul>
<p>I expected to find a feature not present in Brackets: click on a word, hit Ctrl+F to find the word under caret. Nope, not better, I have to select the word (double-click as usual; Ctrl+D does it as well, but I assign it to duplicate line instead) to have it picked up by default. At least, it memorizes the last search. But unlike SciTE (my all-purpose lightweight text editor of choice), it doesn&#x2019;t keep an history of searches.<br>
Good point: it allows to change text in selection only (a feature I miss in Brackets), and to limit searches to word only (something I rarely use but which is sometime useful).</p>
<p>OK, I switched to Atom to type this text (in Markdown format). Good surprise: it has spell checking enabled out of the box. And it can suggest words, although I am not sure of the logic of suggestions (scanning existing buffers, apparently; nice point: it is not obtrusive). Little bug (or unwanted feature ;-) &#x2013; I see a misspelled word in the text (red underline), I right-click directly on it, and choose Correct spelling. It does nothing&#x2026; I found out I have to left-click first on the word to get spelling suggestions.<br>
I see no way to add words to a user dictionary.</p>
<p>The Welcome Guide is nice, I just saw a way to customize the styling. Although it lacks concrete examples: eg. how do I change the color of titles in Markdown? (I avoid reddish colors, reserved to mark errors). Ah, I suppose I have to study an existing style, like <a href="https://github.com/atom/atom-light-syntax/blob/master/index.less">https://github.com/atom/atom-light-syntax/blob/master/index.less</a><br>
And I can see the actual styles by showing the developer tools (View &gt; Developer &gt; Toggle Developer Tools) and using it like Chrome DevTools.<br>
Also a bug: I have <em>Choose a Theme</em> and <em>Customize the Styling</em> opened, I can&#x2019;t scroll back above <em>Install a Package</em>. I have to close one to see the top!</p>
<p>Another bug or unwanted feature: it ensures there is an empty line at the end of a file when saving it, which can be nice (I generally want that), but if I have several lines, it removes the extra ones (which is annoying in a text file, because I want to keep my future paragraph empty lines). Will see if I can disable that.</p>
<p>Undo coalescing is a bit strange: when I type a word, then undo, it removes parts of the word, successively, instead of whole word.</p>
<p>Atom lacks a nice feature of Brackets: in an HTML file, Brackets can auto-complete the path of a resource (script, CSS file, etc.). Found a plugin for that, of course&#x2026; Although it is slightly less convenient.</p>
<p>Annoyance: I can hit Ctrl+F in the Settings &gt; Package page (for example), but it doesn&#x2019;t find anything there (can be convenient to find a given package by something else than its name).</p>
<p>Command palette: good idea to highlight searched terms, but on light theme, I get light gray highlight, nearly unreadable on very light gray background&#x2026;</p>
<p>Minor quibble: title and closing cross in inactive tabs are one or two pixels too low (one pixel lower than the active tab, at least). It &#x201C;hurts&#x201D; my sense of tidiness&#x2026; :-)</p>
<h2 id="installed-packages">Installed packages</h2>
<p>Good point: once a plugin / package is installed, no need to restart Atom to get it working.</p>
<ul>
<li>
<p>Sublime Style Column Selection<br>
Allow column selection with mouse.<br>
1.3.0 by bigfive<br>
<a href="https://atom.io/packages/Sublime-Style-Column-Selection">https://atom.io/packages/Sublime-Style-Column-Selection</a><br>
<a href="https://github.com/bigfive/atom-sublime-select">https://github.com/bigfive/atom-sublime-select</a></p>
</li>
<li>
<p>simple-drag-drop-text<br>
0.3.0 by mark-hahn<br>
<a href="https://atom.io/packages/simple-drag-drop-text">https://atom.io/packages/simple-drag-drop-text</a><br>
<a href="https://github.com/mark-hahn/simple-drag-drop-text">https://github.com/mark-hahn/simple-drag-drop-text</a></p>
</li>
<li>
<p>minimap<br>
Visual miniature representation of the content of the editor. Allows quick navigation.<br>
4.18.0 by atom-minimap<br>
<a href="https://atom.io/packages/minimap">https://atom.io/packages/minimap</a><br>
<a href="https://github.com/atom-minimap/minimap">https://github.com/atom-minimap/minimap</a></p>
</li>
<li>
<p>markdown-mindmap<br>
Shows headings of a Markdown text as a mindmap, allows to navigate.<br>
0.2.4 by dundalek<br>
<a href="https://atom.io/packages/markdown-mindmap">https://atom.io/packages/markdown-mindmap</a><br>
<a href="https://github.com/dundalek/atom-markdown-mindmap">https://github.com/dundalek/atom-markdown-mindmap</a></p>
</li>
<li>
<p>highlight-selected<br>
0.11.1 by richrace<br>
<a href="https://atom.io/packages/highlight-selected">https://atom.io/packages/highlight-selected</a><br>
<a href="https://github.com/richrace/highlight-selected">https://github.com/richrace/highlight-selected</a></p>
</li>
<li>
<p>minimap-highlight-selected<br>
4.3.1 by atom-minimap<br>
<a href="https://atom.io/packages/minimap-highlight-selected">https://atom.io/packages/minimap-highlight-selected</a><br>
<a href="https://github.com/atom-minimap/minimap-highlight-selected">https://github.com/atom-minimap/minimap-highlight-selected</a></p>
</li>
<li>
<p>autocomplete-paths<br>
Autocompletion for paths in the project, according to file system.<br>
1.0.2 by atom-community<br>
<a href="https://atom.io/packages/autocomplete-paths">https://atom.io/packages/autocomplete-paths</a><br>
<a href="https://github.com/atom-community/autocomplete-paths">https://github.com/atom-community/autocomplete-paths</a><br>
With patch <a href="https://github.com/atom-community/autocomplete-paths/pull/51/files">https://github.com/atom-community/autocomplete-paths/pull/51/files</a> applied manually&#x2026;</p>
</li>
<li>
<p>autoclose-html<br>
Automatically close HTML tags.<br>
0.19.0 by mattberkowitz<br>
<a href="https://atom.io/packages/autoclose-html">https://atom.io/packages/autoclose-html</a><br>
<a href="https://github.com/mattberkowitz/autoclose-html">https://github.com/mattberkowitz/autoclose-html</a></p>
</li>
<li>
<p>linter<br>
Engine allowing to display lint information in real time in the editor. Need plugins for various languages.<br>
1.11.3 by atom-community<br>
<a href="https://atom.io/packages/linter">https://atom.io/packages/linter</a><br>
<a href="https://github.com/atom-community/linter">https://github.com/atom-community/linter</a></p>
</li>
<li>
<p>linter-eslint<br>
Linter for JavaScript.<br>
5.2.6  by AtomLinter<br>
<a href="https://atom.io/packages/linter-eslint">https://atom.io/packages/linter-eslint</a><br>
<a href="https://github.com/AtomLinter/linter-eslint">https://github.com/AtomLinter/linter-eslint</a></p>
</li>
<li>
<p>linter-htmlhint<br>
Linter for HTML.<br>
0.2.1 by AtomLinter<br>
<a href="https://atom.io/packages/linter-htmlhint">https://atom.io/packages/linter-htmlhint</a><br>
<a href="https://github.com/AtomLinter/linter-htmlhint">https://github.com/AtomLinter/linter-htmlhint</a></p>
</li>
<li>
<p>linter-csslint<br>
Linter for CSS.<br>
1.1.0 by AtomLinter<br>
<a href="https://atom.io/packages/linter-csslint">https://atom.io/packages/linter-csslint</a><br>
<a href="https://github.com/AtomLinter/linter-csslint">https://github.com/AtomLinter/linter-csslint</a></p>
</li>
<li>
<p>linter-sass-lint<br>
Linter for Sass.<br>
0.4.3 by DanPurdy<br>
<a href="https://atom.io/packages/linter-sass-lint">https://atom.io/packages/linter-sass-lint</a><br>
<a href="https://github.com/DanPurdy/linter-sass-lint">https://github.com/DanPurdy/linter-sass-lint</a></p>
</li>
<li>
<p>pigments<br>
Shows colors from various CSS notations (including named colors). I prefer to display them as circles after the color definition.<br>
0.19.3 by abe33<br>
<a href="https://atom.io/packages/pigments">https://atom.io/packages/pigments</a><br>
<a href="https://github.com/abe33/atom-pigments">https://github.com/abe33/atom-pigments</a></p>
</li>
<li>
<p>atom-beautify<br>
Beaufity code, according to given rules. Not for my code (I always format as I want) but for foreign code pasted in mine&#x2026;<br>
0.28.19 by Glavin001<br>
<a href="https://atom.io/packages/atom-beautify">https://atom.io/packages/atom-beautify</a><br>
<a href="https://github.com/Glavin001/atom-beautify">https://github.com/Glavin001/atom-beautify</a></p>
</li>
<li>
<p>file-icons<br>
Add icons (depending on file type) in the tree view on the left.<br>
1.6.13 by DanBrooker<br>
<a href="https://atom.io/packages/file-icons">https://atom.io/packages/file-icons</a><br>
<a href="https://github.com/DanBrooker/file-icons">https://github.com/DanBrooker/file-icons</a></p>
</li>
<li>
<p>rest-client<br>
Simple Rest client to generate requests to servers.  Complement of RestClient on Firefox, Postman in Chrome.<br>
0.5.0 by ddavison<br>
<a href="https://atom.io/packages/rest-client">https://atom.io/packages/rest-client</a><br>
<a href="https://github.com/ddavison/rest-client">https://github.com/ddavison/rest-client</a></p>
</li>
<li>
<p>tree-ignore<br>
0.2.6 by leny<br>
<a href="https://github.com/leny/atom-tree-ignore">https://github.com/leny/atom-tree-ignore</a><br>
Installation failed silently (not mentioning an error; I see the error when going to <em>Packages</em>), I had to go to the console of the DevTools to see the errors. Apparently, an issue with node-gyp on Windows.</p>
</li>
</ul>
<h1 id="themes">Themes</h1>
<ul>
<li>
<p>gl-light-syntax<br>
2.1.1 by gouvinb<br>
<a href="https://atom.io/themes/gl-light-syntax">https://atom.io/themes/gl-light-syntax</a><br>
<a href="https://github.com/gouvinb/gl-light-syntax/tree/master/styles/languages">https://github.com/gouvinb/gl-light-syntax/tree/master/styles/languages</a></p>
</li>
<li>
<p>naturerainbow-light-syntax<br>
0.1.0 by fthiagogv<br>
<a href="https://atom.io/themes/naturerainbow-light-syntax">https://atom.io/themes/naturerainbow-light-syntax</a><br>
<a href="https://github.com/fthiagogv/naturerainbow-light-syntax">https://github.com/fthiagogv/naturerainbow-light-syntax</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[a review of the GitHub Atom editor (IDE), at version 0.10]]>
    
    </summary>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/tags/ide/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/tags/software/"/>
    
      <category term="Tool" scheme="http://PhiLhoSoft.github.io/tags/tool/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/categories/software/"/>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/categories/software/ide/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Static Site Generators]]></title>
    <link href="http://PhiLhoSoft.github.io/Software/Static%20site%20generators/"/>
    <id>http://PhiLhoSoft.github.io/Software/Static site generators/</id>
    <published>2015-11-14T23:00:00.000Z</published>
    <updated>2015-12-21T07:25:51.119Z</updated>
    <content type="html"><![CDATA[<h1 id="static-site-generator">Static site generator</h1>
<p>So I want to write some new technical articles (like this one&#x2026;) on my latest discoveries.<br>
My previous host keeps <a href="http://Phi.Lho.free.fr">my old site</a> but has cut my FTP access, so I cannot update or add new stuff.</p>
<a id="more"></a>
<aside class="article-wip">
<img class="no-fancybox" src="/images/Work-in-Progress.svg" width="240" height="110" title="Work in Progress" alt="Work in Progress">
This is a work in progress: this article is unfinished and will be updated.
</aside>
<h2 id="static">Static</h2>
<p>I found out that GitHub Pages might be a good free host for technical content, but it won&#x2019;t allow a blog / CMS software (like WordPress) to run on it.<br>
Of course, it has Jekyll, but I wasn&#x2019;t seduced: the syntax is so-so (for me), it is a Ruby tool (slow and I have no control over it), etc.<br>
But it was a hint: no need for a full fledged blog software generating pages from scratch on each user request: these pages are mostly static so they can be coded once and for all, like I did in the previous century&#x2026;<br>
The most dynamic parts are the back-office, which I can live without, and managing user comments (with spam control). For the latter, I saw most solutions just use Disqus, a cross-platform comment service relying only on JS (and the related site / cloud host), so needing no server-side script or database. And I already use it (as a commenter), so it looks like the way to go.</p>
<p>So I need something more flexible, and / or something I could hack into my needs.</p>
<h2 id="listings">Listings</h2>
<p>A quick research shown, via two sites (<a href="https://www.staticgen.com/">Top Open-Source Static Site Generators - StaticGen</a> and <a href="https://staticsitegenerators.net/">Static Site Generators</a>) that there is literally a ton of static site generator softwares.<br>
Note / strong hint for those making such software: if you don&#x2019;t have a site to show of| what your tool can do, you are doing it wrong. No need to pay for a domain name, you can host it on a free site like <a href="http://GitHub.io">GitHub.io</a> or similar.</p>
<h2 id="hugo">Hugo</h2>
<p>I first tried <a href="http://gohugo.io/">Hugo</a>, which I discovered earlier: it has a nice site, which is an important point for this kind of software&#x2026; And a decent doc. And native binary is a promise of speed.<br>
But I quickly hit a limitation: the Markdown parser is quite rigid and not adapted to my needs. And since 1) I don&#x2019;t know Go, 2) I don&#x2019;t have much time for deep hacks, I want something working quickly, I looked elsewhere (it was a &#x201C;no Go&#x201D;&#x2026;).</p>
<h2 id="other-languages">Other languages</h2>
<p>I could use a generator written in Lua, which is a language I know and appreciate, but they seem quite confidential, used by the author and a dozen of users (guestimate&#x2026;), so I feared some issues&#x2026; (or too much work to adapt to my needs).</p>
<p>There are also PHP generators: it feels odd to use this language for off-line generation&#x2026; I can understand they appeal to those familiar with the language.</p>
<p>I can hack a Java-based generator, but I feared some heaviness.</p>
<p>I finally chose to explorate JavaScript-based generators (via Node.js): I know well the language, and I know there is a rich ecosystem of Web-oriented tools.</p>
<h2 id="metalsmith">Metalsmith</h2>
<p>Another interesting generator is <a href="http://www.metalsmith.io/">Metalsmith</a>: it has a very small core, and delegate all tasks to plugins which it orchestrates. It results in flexibility: it can also generate eBooks, etc.</p>
<h2 id="build-tools">Build tools</h2>
<p>But, I thought, it looked like yet another build tool, like Webpack, Brunch or Gulp, only with more specialized plugins.<br>
I know web tools, I know how to transform Markdown to HTML, Sass to CSS, etc. I can surely leverage an existing build tool to do that, with even more flexibility. But as I haven&#x2019;t much time to spend on writing these tools (finding plugins, chaining the tasks into something sensible), I searched some kind of existing &#x201C;glue&#x201D;.</p>
<h3 id="antwar">AntWar</h3>
<p>I first tried <a href="http://antwarjs.github.io/">Antwar</a> which is based on Webpack and React.<br>
It has a good site with a tutorial, and an interesting flexibility.<br>
But I ran into some issues, like a rigid Markdown parser, so I looked elsewhere.</p>
<h3 id="akashacms">AkashaCMS</h3>
<p>Then I tried <a href="http://akashacms.com/">AkashaCMS</a>, still based on Webpack. The site is less sexy, but full of good information. It uses the Markdown-it parser, which is a good choice as it is very flexible.<br>
I have to write my own template, which is not a real problem, particularly if I use x as a starting point.<br>
But, out of the box, it uses the quite outdated EJS template system: the code is still in Google Code! The forum hadn&#x2019;t a new message in months. And the syntax is ugly and heavy, reminds of JSP / ASP, and includes JS code to do its stuff.<br>
Plus it uses Less to generate CSS, while I prefer Sass.<br>
Again, I can replace these parts if I want, the author explains how to change a renderer, but again I wanted something faster to use.</p>
<p>I skip over other generators I saw, like <a href="http://moonwave99.github.io/waffel/">Waffel</a> (based on Brunch), which seems promising, or <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a> also interesting, based also on React.js, but written in CoffeeScript.</p>
<h2 id="hexo">Hexo</h2>
<p>Finally, I came back to <a href="https://hexo.io/">Hexo</a>, which I looked at several times before&#x2026;<br>
That&#x2019;s one of the tools with a nice site, good tutorials, and lot of support: it lists lot of plugins and themes, so it is easy to get started.</p>
<p>Alas, lot (if not all) of these themes are written in EJS (why is it so popular?) and Less&#x2026;</p>
<p>These were the initial choices of Hexo. Since v.3, they moved EJS and Stylus renderers to external plugins, and there are other plugins, but unless you are willing to make your own theme from scratch, you are stuck with these technologies.</p>
<p>I chose the <a href="http://blog.zhangruipeng.me/hexo-theme-icarus/">Icarus</a> theme, responsive, clean and nice, supporting Disqus and Google Analytics out of the box.<br>
I made some minor changes, mostly on the CSS side, to personalize it a bit.</p>
]]></content>
    <summary type="html">
    <![CDATA[Making of this site]]>
    
    </summary>
    
      <category term="Blog" scheme="http://PhiLhoSoft.github.io/tags/blog/"/>
    
      <category term="Site generation" scheme="http://PhiLhoSoft.github.io/tags/site-generation/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/tags/software/"/>
    
      <category term="Tool" scheme="http://PhiLhoSoft.github.io/tags/tool/"/>
    
      <category term="Web" scheme="http://PhiLhoSoft.github.io/tags/web/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/categories/software/"/>
    
      <category term="Tools" scheme="http://PhiLhoSoft.github.io/categories/software/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RxJS distributions]]></title>
    <link href="http://PhiLhoSoft.github.io/Programming/RxJS-operators/"/>
    <id>http://PhiLhoSoft.github.io/Programming/RxJS-operators/</id>
    <published>2015-11-14T23:00:00.000Z</published>
    <updated>2015-12-21T07:40:18.151Z</updated>
    <content type="html"><![CDATA[<h1 id="rxjs-distributions">RxJS distributions</h1>
<p><a href="https://github.com/Reactive-Extensions/RxJS/tree/master/doc">https://github.com/Reactive-Extensions/RxJS/tree/master/doc</a></p>
<p>Numbers are size in KB of .min.js as of 4.0.6 around October 2015. To be used only as comparison between versions.<br>
The file names with + are not in the documentation, I found them after installing RxJS. I guess they come from v.4, and that the doc is still about v.3.</p>
<p>The complete library:</p>
<pre><code>rx.all.js	A	139
</code></pre>
<p>Main Libraries:</p>
<pre><code>rx.js	R	72
rx.aggregates.js	RAg	16
rx.async.js	RAs (needs RBi)	7
</code></pre>
<ul>
<li>rx.backpressure.js		8<br>
rx.binding.js	RBi	7<br>
rx.coincidence.js	RCo	7<br>
rx.experimental.js	RXp	8<br>
rx.joinpatterns.js	RJp	5</li>
<li>rx.sorting.js		3<br>
rx.testing.js	RTe (needs RVt)	7<br>
rx.time.js	RTi	16<br>
rx.virtualtime.js	RVt	4</li>
</ul>
<p>Lite Libraries:</p>
<pre><code>rx.lite.js	L	81
rx.lite.aggregates.js	LAg	17
rx.lite.async.js	LAs	4
</code></pre>
<ul>
<li>rx.lite.backpressure.js		4<br>
rx.lite.coincidence.js	LCo	7<br>
rx.lite.experimental.js	LXp	8<br>
rx.lite.extras.js	LEx	10<br>
rx.lite.joinpatterns.js	LJp	5<br>
rx.lite.testing.js	LTe	7<br>
rx.lite.time.js	LTi	9<br>
rx.lite.virtualtime.js	LVt	4</li>
</ul>
<p>Core Libraries:</p>
<pre><code>rx.core.js	C	15
rx.core.binding.js	CBi	10
rx.core.testing.js	CTe	14
</code></pre>
<h2 id="included-observable-operators">Included Observable Operators</h2>
<h3 id="observable-methods">Observable Methods</h3>
<pre><code>amb	A	R	LEx
case	A	RXp	LXp
catch	A	R	L
concat	A	R	L
create	A	R	L	C
defer	A	R	L
empty	A	R	L
for	A	RXp	LXp
forkJoin	A	RXp	LXp
from	A	R	L
fromArray	A	R	L
fromCallback	A	RAs	L
fromEvent	A	RAs	L
fromEventPattern	A	RAs	L
fromNodeCallback	A	RAs	L
fromPromise	A	RAs (4)	L
generate	A	R	LEx
generateWithAbsoluteTime	A	RTi	LTi
generateWithRelativeTime	A	RTi	LTi
if	A	RXp	LXp
interval	A	RTi	L
just	A	R	L
merge	A	R	L
mergeDelayError	A	R	L
never	A	R	L
of	A	R	L
ofArrayChanges	A
ofWithScheduler	A	R	L
onErrorResumeNext	A	R	LEx
pairs	A	R	L
range	A	R	L
repeat	A	R	L
return	A	R	L
spawn	A	RAs	LAs
start	A	RAs	LAs
startAsync	A	RAs	LAs
throw	A	R	L
timer	A	RTi	L
toAsync	A	RAs	LAs
toPromise		RAs
using	A		LEx
when	A	RJp	LJp
while	A	RXp	LXp
wrap	A	RAs
zip	A	R	L
</code></pre>
<h3 id="observable-instance-methods-prototype-marks-functions-also-on-object">Observable Instance Methods (prototype) (! marks functions also on object)</h3>
<pre><code>aggregate	A	RAg	LAg
all	A	RAg	LAg
</code></pre>
<p>! amb	A	R	LEx<br>
and	A	RJp	LJp<br>
any	A	RAg	LAg<br>
asObservable	A	R	L<br>
average	A	RAg	LAg<br>
buffer	A	RCo	LCo<br>
bufferWithCount	A	R	LEx<br>
bufferWithTime	A	RTi	LTi<br>
bufferWithTimeOrCount	A	RTi	LTi<br>
! catch	A	R	L<br>
combineLatest	A	R	L<br>
! concat	A	R	L<br>
concatAll	A	R<br>
concatMap	A	R	L<br>
connect	A	RBi	L	CBi<br>
controlled	A<br>
count	A	RAg	LAg<br>
debounce	A	RTi	L<br>
defaultIfEmpty	A	R	L<br>
delay	A	RTi	L<br>
delaySubscription	A	RTi	LTi<br>
dematerialize	A		L<br>
distinct	A	R	LEx<br>
distinctUntilChanged	A	R	L<br>
do	A	R	L<br>
doOnNext	A	R	L<br>
doOnError	A	R	L<br>
doOnCompleted	A	R	L<br>
doWhile	A	RXp	LXp<br>
elementAt	A	RAg	LAg<br>
every	A	RAg	LAg<br>
expand	A	RXp	LXp<br>
extend	A	RXp	LXp<br>
filter	A	R	L<br>
finally | ensure	A	R	L<br>
find	A	RAg	LAg<br>
findIndex	A	RAg	LAg<br>
first	A	RAg	LAg<br>
flatMap	A	R	L<br>
flatMapFirst	A	RXp	LXp<br>
flatMapLatest	A	R	L<br>
flatMapObserver	A	R<br>
flatMapWithMaxConcurrent	A	RXp	LXp<br>
! forkJoin	A	RXp	LXp<br>
groupBy	A	RCo	LCo<br>
groupByUntil	A	RCo	LCo<br>
groupJoin	A	RCo	LCo<br>
ignoreElements	A	R	L<br>
includes	A	RAg (3)	LAg (5)<br>
indexOf		RAg	LAg<br>
isEmpty	A	RAg	LAg<br>
join	A	RCo	LCo<br>
last	A	RAg	LAg<br>
lastIndexOf	A	RAg	LAg<br>
let	A	RXp	LXp<br>
manySelect	A	RXp	LXp<br>
map	A	R	L<br>
max	A	RAg	LAg<br>
maxBy	A	RAg	LAg<br>
! merge	A	R	L<br>
mergeAll	A	R	L<br>
min	A	RAg	LAg<br>
minBy	A	RAg	LAg<br>
multicast	A		L<br>
observeOn	A	R	LEx<br>
onErrorResumeNext	A	R	LEx<br>
pairwise	A	RCo	LCo<br>
partition	A	RCo	LCo<br>
pausable	A		(L)<br>
pausableBuffered	A<br>
pluck	A<br>
publish	A	RBi	L	CBi<br>
publishLast	A	RBi	L	CBi<br>
publishValue	A	RBi	L	CBi<br>
refCount	A	RBi	L	CBi<br>
reduce	A	RAg	LAg<br>
repeat	A	R	L<br>
replay	A	RBi	L	CBi<br>
retry	A	R	L<br>
retryWhen	A	R	L<br>
sample	A	RTi	L &amp; LTi<br>
scan	A	R	L<br>
select	A	R	L<br>
selectConcat	A	R	L<br>
selectMany	A	R	L<br>
selectManyObserver	A<br>
sequenceEqual	A	RAg	LAg<br>
selectSwitch		R	L<br>
selectSwitchFirst		RXp	LXp<br>
selectWithMaxConcurrent		RXp	LXp<br>
share	A (1)	RBi		CBi<br>
shareLast		RBi		CBi<br>
shareReplay	A (1)	RBi		CBi<br>
shareValue	A (1)	RBi		CBi<br>
single	A	R &amp; RAg	LAg<br>
singleInstance	A	RBi	L	CBi<br>
skip	A	R	L<br>
skipLast	A	R	L<br>
skipLastWithTime	A	RTi	LTi<br>
skipUntil	A	R	L<br>
skipUntilWithTime	A<br>
skipWhile	A	R	L<br>
slice	A	RAg	LAg<br>
some	A	RAg	LAg<br>
startWith	A	R	L<br>
subscribe | forEach	A	R	L<br>
subscribeOn	A	R (2)	LEx<br>
subscribeOnNext		R	L<br>
subscribeOnError		R	L<br>
subscribeOnCompleted		R	L<br>
sum	A	RAg	LAg<br>
switch | switchLatest	A	R	L<br>
switchFirst	A<br>
take	A	R	L<br>
takeLast	A	R	L<br>
takeLastBuffer	A		LEx<br>
takeLastBufferWithTime	A	RTi	LTi<br>
takeLastWithTime	A	RTi	LTi<br>
takeUntil	A	R	L<br>
takeUntilWithTime	A<br>
takeWhile	A	R	L<br>
tap	A		L<br>
tapOnNext	A		L<br>
tapOnError	A		L<br>
tapOnCompleted	A		L<br>
thenDo		RJp	LJp<br>
throttle	A	RTi	L<br>
timeInterval	A	RTi	LTi<br>
timeout	A	RTi	L &amp; LTi<br>
timeoutWithSelector			LTi<br>
timestamp	A	RTi	L &amp; LTi<br>
toArray	A	R	L<br>
toMap		RAg	LAg<br>
? toPromise			L<br>
toSet		RAg	LAg<br>
transduce		R	L<br>
where	A	R	L<br>
window	A	RCo	LCo<br>
windowWithCount	A	R	LEx<br>
windowWithTime	A	RTi	LTi<br>
windowWithTimeOrCount	A	RTi	LTi<br>
withLatestFrom	A	R	L<br>
! zip	A	R	L<br>
zipIterable	A	R	L</p>
<h2 id="included-classes">Included Classes</h2>
<h3 id="core-objects">Core Objects</h3>
<pre><code>Rx.Observer	A	R	L	C
Rx.Observable		R		C
Rx.Notification	A	R	L	CTe
</code></pre>
<h3 id="subjects">Subjects</h3>
<pre><code>Rx.AsyncSubject	A	R	L	CBi
Rx.BehaviorSubject		RBi	L	CBi
Rx.ReplaySubject		RBi	L	CBi
Rx.Subject	A	R	L	CBi
</code></pre>
<h3 id="schedulers">Schedulers</h3>
<pre><code>Rx.Scheduler	A	R	L	C
Rx.TestScheduler		RTe	LTe	CTe
Rx.VirtualTimeScheduler		RVt	LVt	CTe
Rx.HistoricalScheduler		RVt	LVt
</code></pre>
<h3 id="disposables">Disposables</h3>
<pre><code>Rx.CompositeDisposable	A	R	L	C
Rx.Disposable	A	R	L	C
Rx.RefCountDisposable	A	R	L
Rx.SerialDisposable	A	R	L	C
Rx.SingleAssignmentDisposable	A	R	L	C
</code></pre>
<h3 id="testing-classes">Testing classes</h3>
<pre><code>Rx.ReactiveTest		RTe	LTe	CTe
Rx.Recorded		RTe	LTe	CTe
Rx.Subscription		RTe	LTe	CTe
Rx.TestScheduler (see Schedulers above)
</code></pre>
<p>(XYz): not in the lists, but found in the description of the operator.<br>
(1): Out of order in the list at <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.complete.md">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.complete.md</a><br>
Also some methods / classes are not in All?<br>
(2): Out of order in the list at <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.md">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.md</a><br>
(3): Out of order in the list at <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.aggregates.md">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.aggregates.md</a><br>
(4): Not in <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.async.md">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/main/rx.async.md</a><br>
(5): Out of order in the list at <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/lite/rx.lite.aggregates.md">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/libraries/lite/rx.lite.aggregates.md</a></p>
<p>?ts=40</p>
]]></content>
    <summary type="html">
    <![CDATA[RxJS distributions and their operators]]>
    
    </summary>
    
      <category term="Functional programming" scheme="http://PhiLhoSoft.github.io/tags/functional-programming/"/>
    
      <category term="JavaScript" scheme="http://PhiLhoSoft.github.io/tags/javascript/"/>
    
      <category term="Library" scheme="http://PhiLhoSoft.github.io/tags/library/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/tags/programming/"/>
    
      <category term="Reactive" scheme="http://PhiLhoSoft.github.io/tags/reactive/"/>
    
      <category term="RxJS" scheme="http://PhiLhoSoft.github.io/tags/rxjs/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/categories/programming/"/>
    
      <category term="General" scheme="http://PhiLhoSoft.github.io/categories/programming/general/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Functional Reactive Programming]]></title>
    <link href="http://PhiLhoSoft.github.io/Programming/Functional%20Reactive%20Programming/"/>
    <id>http://PhiLhoSoft.github.io/Programming/Functional Reactive Programming/</id>
    <published>2015-11-09T23:00:00.000Z</published>
    <updated>2015-12-20T23:21:48.716Z</updated>
    <content type="html"><![CDATA[<h1 id="functional-reactive-programming">Functional Reactive Programming</h1>
<p>FRP is a way to deal with events and asynchronous data in a functional style.<br>
Basically, it is an implementation of the Observer design pattern, dealing with streams of data coming on a timeline.</p>
<h2 id="concept">Concept</h2>
<p>We saw, in the article about <a href="/Programming/Functional%20programming%20introduction/">functional programming</a>, powerful ways to process iterable data, by composing functions, with lazy evaluation able to deal with infinite data, etc.<br>
FRP does the same, but applied to streams of events, which introduces a new dimension: time.<br>
Events can be seen as some data coming at a given point in time.<br>
Data might come from user interaction: a keyboard key is pressed or released, the mouse moves, is pressed, dragged, released, etc.<br>
Data can also come from a server, after an asynchronous request. File system requests (asynchronous reading of file in Node.js, for example) are similar.<br>
It can also be a timer, delivering a timeout once or regularly.<br>
It can even come from static data (eg. content of an array): in this case, time is &#x201C;now&#x201D;.</p>
<a id="more"></a>
<aside class="article-wip">
<img class="no-fancybox" src="/images/Work-in-Progress.svg" width="240" height="110" title="Work in Progress" alt="Work in Progress">
This is a work in progress: this article is unfinished and will be updated.
</aside>
<p>In his seminal article <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">The introduction to Reactive Programming you&#x2019;ve been missing</a>, Andre Staltz wrote the &#x2018;mantra&#x2019;: &#x201C;Everything is a stream&#x201D;.<br>
It looks like a golden hammer seeing the world as nails to hit&#x2026; I prefer the less slogan-like &#x201C;Everything can be seen as a stream&#x201D;, or perhaps even more accurately, &#x201C;Everything can be put in a stream&#x201D;.<br>
After all, a stream is just a sequential collection (succession) of items disposed along a time axis, ie. with a timestamp.<br>
It can be applied in the real world, from trains coming to a station to persons at a <guichet>. Even the only time one person went to a concert can be seen as a stream&#x2026; with only one item.</guichet></p>
<p>So streams are a way to model &#x201C;the world&#x201D; from the point of view of moments in time, ordered along the time axis.</p>
<h2 id="implementations">Implementations</h2>
<h3 id="disclaimer">Disclaimer</h3>
<p>Purists of the FRP concept, those having coined the term, claim that the implementations I talk about here are not really FRP.</p>
<p>Let&#x2019;s agree on that and say that what we call FRP here is just a bastadized, simplified, with pragmatic compromizes, that happens to use the same term, because it is just convenient&#x2026;</p>
<h3 id="javascript">JavaScript</h3>
<p>FRP has been implemented in various languages, particularly in functional languages like Haskell where it is a good fit to their paradigms. But it can be found also in Java, Scala, C#, etc.<br>
It is quite popular in JavaScript, quite functional in nature, where it solves a number of hard problems: avoiding callback hell (chained asynchronous calls), easing usage of promises and timeouts, handling successions of user input, etc.<br>
Thus we saw lot of FRP libraries to be created. RxJS is among the firsts. Bacon was created in reaction to the complexity of the former, Kefir was born because Bacon is slow and memory hungry, More.js is yet another library, etc.<br>
The <a href="http://xgrommx.github.io/rx-book/index.html">RxJS book</a> lists a number of them in its <a href="http://xgrommx.github.io/rx-book/content/resources/similar_libraries/index.html">Similar libraries</a> page.</p>
<p>The principles explained here can be applied to different languages and libraries, but to avoid being too abstract, I will give examples in JS, using a specific library.</p>
<h3 id="rxjs">RxJS</h3>
<p>I briefly explored some of the JS libraries, but finally settled on RxJS: it is one of the most complete implementation, it is backed by a corporation instead of being an experiment from an individual, it has good docs and good tutorials.<br>
Another advantage: its API has been defined by the <a href="http://reactivex.io/">ReactiveX</a> project, and it has been implemented in lot of languages: Java, C#, C++, Ruby, Python, Swift, and many JVM languages (often via RxJava). Plus some independently developped implementations, like Rx.PHP.<br>
So once you know the API for a language, using it in another language is rather trivial, needing mostly minor adaptations.<br>
One downside of RxJS is its size: it is a large API, so there is lot to learn, and the library is quite big, which can be annoying if you want a lean application (eg. for using on mobile devices).<br>
That said, a large part of the API can be ignored at first, a beginner needs to know only a few functions (called <em>operators</em> in RxJS).<br>
Moreover, the API has been split in various packages: the Core libraries contains only the vital minimum for Rx. The Lite libraries and the Main libraries have a base file with the objects and the essential operators, and other files splitted by theme: aggregates, async, time, etc. The difference between Main and Lite resides in the way the operators are grouped.<br>
The point is that a project can include only a base file, and add additional ones if a specific operator is needed. This can reduce the amount of code to include in a page.<br>
Or, for experimentations and convenience, just include the <code>rx.all.js</code> file and be done.</p>
<p>RxJS calls stream &#x201C;sequences&#x201D;, and since the point is to observe them and to react on what they content, they call them &#x201C;observable sequences&#x201D;. Older documents called them just &#x201C;observables&#x201D;, a bit ambiguous, so they adopted the longer term. I might still use the &#x201C;stream&#x201D; term too.</p>
<h2 id="creating-a-stream">Creating a stream</h2>
<p>You can create an Observable from scratch, but in most case, you just use one of the adaptors wrapping common JavaScript entities in an observable sequence.</p>
<h3 id="wrapping-in-a-stream">Wrapping in a stream</h3>
<h3 id="creating-from-scratch">Creating from scratch</h3>
<p>You can create a new instance of the <code>Rx.Observable</code> object.</p>
<h2 id="subscribing-to-a-stream">Subscribing to a stream</h2>
<p>By subscribing to a stream, you create an Observer, which is, most of the time, a Disposable, which can clean up the observed resource automatically or on demand.</p>
<h3 id="hot-and-cold">Hot and cold</h3>
]]></content>
    <summary type="html">
    <![CDATA[Tutorial about the functional reactive programming paradigm, using RxJS as illustration]]>
    
    </summary>
    
      <category term="Functional programming" scheme="http://PhiLhoSoft.github.io/tags/functional-programming/"/>
    
      <category term="JavaScript" scheme="http://PhiLhoSoft.github.io/tags/javascript/"/>
    
      <category term="Library" scheme="http://PhiLhoSoft.github.io/tags/library/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/tags/programming/"/>
    
      <category term="Reactive" scheme="http://PhiLhoSoft.github.io/tags/reactive/"/>
    
      <category term="RxJS" scheme="http://PhiLhoSoft.github.io/tags/rxjs/"/>
    
      <category term="Tutorial" scheme="http://PhiLhoSoft.github.io/tags/tutorial/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/categories/programming/"/>
    
      <category term="General" scheme="http://PhiLhoSoft.github.io/categories/programming/general/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using Lodash for fun and profit]]></title>
    <link href="http://PhiLhoSoft.github.io/Programming/Using%20Lodash%20for%20fun%20and%20profit/"/>
    <id>http://PhiLhoSoft.github.io/Programming/Using Lodash for fun and profit/</id>
    <published>2015-09-30T22:00:00.000Z</published>
    <updated>2015-12-20T23:26:42.649Z</updated>
    <content type="html"><![CDATA[<h1 id="using-lodash-for-fun-and-profit">Using Lodash for fun and profit</h1>
<p>Lodash is a JavaScript utility library enabling a functional programming coding style.<br>
Lodash has general purpose functions, for type checking, string utilities, even functions to manipulate functions.<br>
More importantly, it has functions to manipulate collections. Collections is a general term covering arrays, objects (seen as maps) and even strings (seen as arrays of characters).</p>
<p>This allows to replace most <code>for</code> loops with powerful and succint function calls, showing clearly the intent of the operation without having to analyze complex code.</p>
<a id="more"></a>
<aside class="article-wip">
<img class="no-fancybox" src="/images/Work-in-Progress.svg" width="240" height="110" title="Work in Progress" alt="Work in Progress">
This is a work in progress: this article is unfinished and will be updated.
</aside>
<h2 id="history">History</h2>
<p>In the days of JavaScript before EcmaScript 5 (which added methods like map or filter), JS was mostly used as an imperative language.<br>
The Underscore library (created by Jeremy Ashkenas) changed that by introducing (in 2009) functions like map, filter or reduce to ease processing of arrays. Similarly to jQuery, which adds a global variable named <code>$</code> to be reacheable from everywhere, Underscore adds a global variable named&#x2026; <code>_</code> to provide its functions.<br>
An Underscore contributer, John-David Dalton, tired of some limitations and inconsistencies of the library, forked it (in 2012) and named the project Lo-Dash (pun on &#x201C;low dash&#x201D;, ie. an underscore). Later, it just took the name Lodash. The library kept the <code>_</code> symbol, as it is intended to be a drop-in replacement of Underscore: replace one with the other, no other code change, and benefit from higher speed, more functions, more consistency and better documentation.<br>
Today, Lodash diverges from the Underscore API but maintains a compatibility build.<br>
Out of the box, Lodash is bigger than Underscore. Unless you start adding extensions to the latter to get functionalities available in Lodash&#x2026; And Lodash has a tool to create a build having only the functions you want. And if you use <code>require</code> on your functions, it will build automatically with only them.<br>
As said, EcmaScript 5 brought some functional features like map or filter on arrays. Underscore uses them if available, hoping their implementation will be someday faster than a manual implementation. Lodash generally prefers its hand-tuned implementations, much faster than current browser implementations. JD Dalton is performance-obsessed (he co-created a benchmark library and the JSPerf site) so he ensures the performance hit of using his library instead of hand-crafted for loops is very minor.</p>
<p>Personally, I started to use Underscore, but I found I needed to mutate an array, to avoid loosing AngularJS bindings. Underscore doesn&#x2019;t allow that, so I looked into its extensions. But the one allowing maybe to do that was poorly documented. I finally used Lodash and never looked back.<br>
I once made an issue (#2052) on Underscore to point out that some information was missing at one place and had to be found elsewhere. The issue was closed without change.<br>
In contrast, Lodash&#x2019;s doc repeats all the information needed to use a function in each entry. It might seem tiresome, but the user skips over these repetitions&#x2026; unless she really need the info! In this case, it is here. Great when jumping to a definition to refresh the memory&#x2026; or to discover it.<br>
Moreover, I made an issue to point out some little confusion. JD Dalton quickly asked for a pull request, and merged it verbatim within hours.</p>
<h2 id="functional-programming">Functional programming</h2>
<p>As said, Lodash has functions acting specifically on arrays, objects (aka. associative arrays, aka. maps) and strings (and more).<br>
But it also has functions that treat these three types as one: collection. They are taken as &#x201C;bag of items in variable number, ordered or not&#x201D;.<br>
These functions always take a collection as input, and generally a function, called <em>iteratee</em>, or <em>predicate</em> if it returns a boolean, that processes each item of the collection.<br>
There are functions to filter out items (or to keep only some of them), to map them to something else, to reduce them to a single value, to find an item, etc.<br>
With them, you will never need to write a for loop ever again&#x2026;</p>
<p>I wrote <a href="/Programming/Functional%20programming%20introduction/">an article explaining the base principles of functional programming</a> (FP) behind these functions. I invite you to read it before continuing here: although the article is language agnostic, it fully apply to Lodash and I cleverly used Lodash function names there&#x2026; Actually, most of them are relatively standard in the FP world and can be found in various libraries across various languages.</p>
<p>So here, I will concentrate on the specificities of Lodash, fully adapted to the needs of JavaScript.</p>
<h2 id="general-patterns-of-lodash-function-parameters">General patterns of Lodash function parameters</h2>
<p>As said, lot of Lodash functions take a collection as first parameter, and an iteratee as second one.<br>
Example:<br>
<code>var r = _.filter(list, function (v) { return v.name === someName; });</code><br>
You will find yourself to write frequently such simple predicate.<br>
So Lodash made a shortcut for this pattern:<br>
<code>var r = _.filter(list, &apos;name&apos;, someName);</code><br>
Even if you use ES6 and its arrow notation, it is still more concise&#x2026;</p>
<p>You can even omit the value:<br>
<code>var r = _.filter(list, &apos;name&apos;);</code><br>
In this case, Lodash will return the value of this property for each object, used here as a truthy or falsy value: here, it will keep out all objects without a name property (undefined), or with a null or empty value.<br>
If you replace <code>filter</code> with <code>map</code>, it returns all the name values of the list.</p>
<p>If you replace the property name with an object, Lodash will return <code>true</code> if the current item includes (deeply) all the properties of the given object with their values.<br>
For example:<br>
<code>var p = _.find(persons, { name: Bond&apos;, surname: &apos;James&apos; });</code><br>
will return the first person with these name and surname.</p>
<p>You will find these shortcuts in most Lodash functions, if applicable. The Lodash documentation re-explain them on each function supporting them.</p>
<p>Most iteratees / predicates also share the same set of parameters: they are generally called with the current item, its index if the collection is an array or a string, or its key if that&#x2019;s a map (an object), and the collection itself.<br>
When a function has an iteratee (or other callback function), it also accepts an optional <code>thisArg</code> as last parameter. This allows to bind an object to the callback, to access its properties or methods. I haven&#x2019;t used it yet&#x2026;</p>
<p>Note that Lodash is robust against <code>undefined</code> or <code>null</code> input: it won&#x2019;t throw exceptions, but will do some kind of noop, depending on function.</p>
<h2 id="reminder">Reminder</h2>
<p>In the article mentioned above, I talk about some common functions:<br>
forEach (each), forEachRight (eachRight), reduce (foldl, inject), reduceRight (foldr), range, filter (select), reject, find (detect), findLast, findIndex, map (collect), mapRight, take, takeWhile, takeRight, takeRightWhile, first (head), last, initial, rest (tail), drop, dropWhile, dropRight, dropRightWhile, map, every (all), some (any), zip, unzip, partial, ary, rearg, negate.<br>
The names between parentheses are aliases.<br>
Except for consistency, I won&#x2019;t present them again here.</p>
<p>I won&#x2019;t present all the functions of Lodash, check the official documentation to have an up-to-date list and detailed presentations.<br>
They are numerous. I advice to quickly scan the list, to get an idea of what they do, what are the available tools, then later to check in depth the functions you need.</p>
<h2 id="chaining">Chaining</h2>
<p>Let say you want to filter an array, take only the last 10 elements and map them to something else.<br>
You can do that in three steps:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [ <span class="number">10</span>, <span class="number">55</span>, <span class="number">6</span>, <span class="number">98</span>, ... ];</span><br><span class="line"><span class="keyword">var</span> rf = _.filter(numbers, <span class="function"><span class="keyword">function</span> <span class="params">(n)</span></span><br><span class="line"></span>{</span><br><span class="line">  <span class="keyword">return</span> n &lt;= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> rt = _.take(rf, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> r = _.map(rt, <span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>{ <span class="keyword">return</span> n * <span class="number">10</span>; });</span><br></pre></td></tr></table></figure>
<p>This shows clearly each step, which can be nice for debugging, but it is a bit verbose and it creates variables &#x201C;polluting&#x201D; the current scope.<br>
Of course, you can nest the calls:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = _.map(_.take(_.filter(numbers, <span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>{ <span class="keyword">return</span> n &lt;=<span class="number">10</span>; }, <span class="number">10</span>), <span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>{ <span class="keyword">return</span> n * <span class="number">10</span>; });</span><br></pre></td></tr></table></figure>
<p>No more intermediary variables, but it is a bit less readable, and the order of calls isn&#x2019;t obvious.<br>
Lodash allows to chain calls, leading to more readable code, and even to more efficient processing of data.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = _.chain(numbers)</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>{ <span class="keyword">return</span> n &lt;= <span class="number">10</span>; })</span><br><span class="line">  .take(<span class="number">10</span>)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span> <span class="params">(n)</span> </span>{ <span class="keyword">return</span> n * <span class="number">10</span>; })</span><br><span class="line">  .value();</span><br></pre></td></tr></table></figure>
<p>Notice the call to <code>value()</code>.<br>
It is necessary because this chain is open-ended: you can add other functions after it. Eg. you can end it after the <code>take()</code>, and have two different values by ending the chain with two different <code>map</code>s.<br>
<code>value()</code> tells to end the chain and to evaluate it.<br>
This shows that this chaining is <em>lazy</em>: no processing is done until it is requested by <code>value()</code>. Moreover, this chaining is optimized, Lodash practices function fusion with shortcut: it doesn&#x2019;t create an intermediary result on each function call, but rather creates a compound function processing the whole input at once. And, of course, it will not map the data beyond the 10 selected by <code>take()</code>.<br>
There is a slighly shorter variant:</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var r = _<span class="comment">(numbers)</span>.filter<span class="comment">(...)</span>...value<span class="comment">()</span>;</span><br></pre></td></tr></table></figure>
<p>They are basically the same, with a little difference: <code>value()</code> is not necessary if the final result is a primitive (string, number, &#x2026;). And it is slightly shorter, although less explicit.</p>
<h2 id="mutating-data">Mutating data</h2>
<p>We saw that FP privileges usage of immutable data,  returning a new structure instead of changing the given one.<br>
But Lodash is pragmatic, and provides functions that can mutate collections in-place: it might be more memory efficient, and it is useful when you must keep the reference to the data. For example, if you bind a collection in AngularJS, you have to change it in-place; if you assign a new collection, the binding is broken.</p>
<h2 id="collection-functions">Collection functions</h2>
<p>Reminder: <em>collection</em> is a generic term. Basically, it covers JS iterable structures: arrays, objects (seen as map, sometime called associative arrays) and strings (seen as a list of characters).<br>
The following functions work for these kinds of collections. Later, we will present functions more specific to each type.</p>
<h2 id="array-functions">Array functions</h2>
<p>We already saw lot of functions that can be applied on arrays (among other iterable structures). Let&#x2019;s see some more specific.</p>
<h3 id="functions-mutating-arrays">Functions mutating arrays</h3>
<p><code>_.fill(array, value, [start=0], [end=array.length])</code><br>
Fills the given array with the given value in the given range (defaulting to full array).</p>
<p><code>_.pull(array, [values])</code><br>
Removes all provided values (as list of arguments) from the array.</p>
<p><code>_.pullAt(array, [indexes])</code><br>
Removes elements from the array at the given indexes (as list of arguments or array of indexes).<br>
Returns an array of removed values (null value if index is out of range).</p>
<p><code>_.remove(array, [predicate=_.identity], [thisArg])</code><br>
Removes all elements from array that predicate returns truthy for, and returns an array of removed values.<br>
Supports property shortcuts.</p>
<p><code>_.property.reverse()</code><br>
Reverses the wrapped array and returns the wrapped instance (for chaining).</p>
<h3 id="functions-returning-a-new-arrays">Functions returning a new arrays</h3>
<p><code>_.without()</code><br>
Same as <code>_.pull</code> but doesn&#x2019;t mutate the array.</p>
<p><code>_.at()</code><br>
Same as <code>_.pullAt</code> but doesn&#x2019;t mutate the array.</p>
<p><code>_.filter()</code><br>
Same as <code>_.remove</code> but doesn&#x2019;t mutate the array.</p>
<h2 id="object-functions">Object functions</h2>
<h3 id="accessors">Accessors</h3>
<p>Objects in JS are dynamic: sometime, an information is optional or missing.<br>
For example, you might want to access <code>order.customer.addresses.shipping.zipCode</code>.<br>
The shipping address can be optional, eg. if it is the same than the customer&#x2019;s address.<br>
Plus we can have missing (<code>undefined</code>) information at any level.<br>
We can put the access in a try / catch block. But that&#x2019;s ugly.<br>
Or we can check each level up to the one we want:<br>
<code>if (order !== undefined &amp;&amp; order.customer !== undefined &amp;&amp; order.customer.addresses !== undefined &amp;&amp; ...)</code><br>
Tiresome and prone to errors. Idem for the shortcut version <code>order &amp;&amp; order.customer &amp;&amp; order.customer.addresses ...</code>.<br>
Lodash offers functions to access an arbitrary depth of nested objects without throwing errors.</p>
<p><code>_.get(object, path, [defaultValue])</code><br>
Accesses the property at the given path.<br>
Example: <code>var zip = _.get(order, &quot;customer.addresses.shipping.zipCode&quot;);</code><br>
gives the value if available, or <code>undefined</code> (or the default value, if provided) if one level is missing.</p>
<p><code>_.set(object, path, value)</code><br>
Is similar, except it sets the value at the given path, creating intermediary objects if needed.<br>
It mutates the object.</p>
<p><code>_.has(object, path)</code><br>
Checks if path is a direct property.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var oo = { <span class="string">x:</span> <span class="string">&apos;foo&apos;</span>, <span class="string">y:</span> { <span class="string">z:</span> <span class="string">&apos;bar&apos;</span>, <span class="string">u:</span> undefined } };</span><br><span class="line">_has(oo, <span class="string">&apos;y.z&apos;</span>) <span class="comment">//=&gt; true</span></span><br><span class="line">_has(oo, <span class="string">&apos;y.u&apos;</span>) <span class="comment">//=&gt; true</span></span><br><span class="line">_has(oo, <span class="string">&apos;y.m&apos;</span>) <span class="comment">//=&gt; false</span></span><br></pre></td></tr></table></figure>
<p>Note that <code>path</code> can also be an array: <code>[ &apos;customer&apos;, &apos;addresses&apos;, ... ]</code><br>
It can include indexes of arrays: <code>&quot;customer.addresses[1].zipCode&quot;</code></p>
<h3 id="assign-merge-and-defaults">Assign, merge and defaults</h3>
<p>Elegant and flexible ways to merge objects and set default values to missing properties.<br>
These functions mutate the destination object, and return the result.<br>
It is not uncommon to give an empty object <code>{}</code> as destination, if we want to merge two objects but to leave them intact (or if one of them can be undefined).</p>
<p><code>_assign(object, [sources], [customizer], [thisArg])</code><br>
Assign the (own) properties of source object(s) to the destination object, each additional source property overwriting the previous ones, including source properties set to undefined</p>
<p><code>defaults(object, [sources])</code><br>
Assign the (own) properties of source object(s) to the destination object, only if the destination property is <code>undefined</code>. Once a property is assigned, it won&#x2019;t change.</p>
<p><code>defaultsDeep(object, [sources])</code><br>
Is like <code>_.defaults</code> but it t recursively assigns default properties.</p>
<p>merge overwrites deeply all properties with successive values, except undefined source properties</p>
<p>Example:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var dest = { <span class="string">name:</span> <span class="string">&apos;Foo&apos;</span>, <span class="string">age:</span> <span class="number">25</span>, <span class="string">driver:</span> <span class="literal">true</span>,</span><br><span class="line"><span class="label">    id:</span> { <span class="string">driverLicense:</span> <span class="string">&apos;88-65&apos;</span>, <span class="string">ssn:</span> <span class="string">&apos;1-54-455&apos;</span>, <span class="string">other:</span> <span class="string">&apos;mango&apos;</span> }  };</span><br><span class="line">var src1 = { <span class="string">name:</span> <span class="string">&apos;Bar&apos;</span>, <span class="string">driver:</span> <span class="literal">false</span>, <span class="string">address:</span> <span class="string">&apos;Here and there&apos;</span>,</span><br><span class="line"><span class="label">    id:</span> { <span class="string">driverLicense:</span> undefined, <span class="string">ssn:</span> <span class="string">&apos;2-44-985&apos;</span>, <span class="string">pwd:</span> <span class="string">&apos;123&apos;</span> }  };</span><br><span class="line">var src2 = { <span class="string">name:</span> <span class="string">&apos;Moo&apos;</span>, <span class="string">maried:</span> <span class="literal">true</span>, <span class="string">age:</span> undefined, <span class="string">address:</span> <span class="string">&apos;Somewhere&apos;</span>,</span><br><span class="line"><span class="label">    id:</span> { <span class="string">driverLicense:</span> <span class="string">&apos;11-75&apos;</span>, <span class="string">ssn:</span> undefined, <span class="string">warcry:</span> <span class="string">&apos;Kowabunga&apos;</span> } };</span><br><span class="line"></span><br><span class="line">_.assign(dest, src1, src2)</span><br><span class="line"></span><br><span class="line">==&gt; {<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Moo&quot;</span>,<span class="string">&quot;driver&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;id&quot;</span>:{<span class="string">&quot;driverLicense&quot;</span>:<span class="string">&quot;11-75&quot;</span>,<span class="string">&quot;warcry&quot;</span>:<span class="string">&quot;Kowabunga&quot;</span>},<span class="string">&quot;address&quot;</span>:<span class="string">&quot;Somewhere&quot;</span>,<span class="string">&quot;maried&quot;</span>:<span class="literal">true</span>}</span><br><span class="line"></span><br><span class="line">_.merge(dest, src1, src2)</span><br><span class="line"></span><br><span class="line">==&gt; {<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Moo&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">25</span>,<span class="string">&quot;driver&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;Somewhere&quot;</span>,<span class="string">&quot;maried&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:{<span class="string">&quot;driverLicense&quot;</span>:<span class="string">&quot;11-75&quot;</span>,<span class="string">&quot;ssn&quot;</span>:<span class="string">&quot;2-44-985&quot;</span>,<span class="string">&quot;other&quot;</span>:<span class="string">&quot;mango&quot;</span>,<span class="string">&quot;pwd&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;warcry&quot;</span>:<span class="string">&quot;Kowabunga&quot;</span>}}</span><br><span class="line"></span><br><span class="line">_.defaults(dest, src1, src2)</span><br><span class="line"></span><br><span class="line">==&gt; {<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Foo&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">25</span>,<span class="string">&quot;driver&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;Here and there&quot;</span>,<span class="string">&quot;maried&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:{<span class="string">&quot;driverLicense&quot;</span>:<span class="string">&quot;88-65&quot;</span>,<span class="string">&quot;ssn&quot;</span>:<span class="string">&quot;1-54-455&quot;</span>,<span class="string">&quot;other&quot;</span>:<span class="string">&quot;mango&quot;</span>}}</span><br><span class="line"></span><br><span class="line">_.defaultsDeep(dest, src1, src2)</span><br><span class="line"></span><br><span class="line">==&gt; {<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Foo&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">25</span>,<span class="string">&quot;driver&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;Here and there&quot;</span>,<span class="string">&quot;maried&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:{<span class="string">&quot;driverLicense&quot;</span>:<span class="string">&quot;88-65&quot;</span>,<span class="string">&quot;ssn&quot;</span>:<span class="string">&quot;1-54-455&quot;</span>,<span class="string">&quot;other&quot;</span>:<span class="string">&quot;mango&quot;</span>,<span class="string">&quot;pwd&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;warcry&quot;</span>:<span class="string">&quot;Kowabunga&quot;</span>}}</span><br></pre></td></tr></table></figure>
<h2 id="string-functions">String functions</h2>
<h3 id="case-changing-functions">Case-changing functions</h3>
<p>Reminder: case is a typographical style: uppercase (A) or lowercase (a).<br>
JavaScript allows to change case of a whole string: <code>s.toUpperCase()</code> and <code>s.toLowerCase()</code>.<br>
Language identifiers (and file names, etc.) can have various styles:</p>
<ul>
<li>snake_case (one style of variables)</li>
<li>UPPER_CASE (constants)</li>
<li>camelCase (another style of variables)</li>
<li>TitleCase (classes)</li>
<li>kebab-case (CSS properties, often CSS class names too)<br>
and sentence styles:</li>
<li>Initial capital</li>
<li>Start Case</li>
</ul>
<p>Lodash offers a number of functions to convert from any style to one of these.</p>
<p>_.camelCase: foo&#x2013;bar-, __foo_bar, Foo Bar =&gt; fooBar<br>
_.capitalize: foo bar =&gt; Foo bar<br>
_.kebabCase: FooBar, <em>foo__bar</em>, foo Bar =&gt; foo-bar<br>
_.snakeCase: foo bar, fooBar, Foo-Bar =&gt; foo_bar<br>
_.startCase: foo bar, --Foo-bar, _foo_bar =&gt; Foo Bar</p>
<h3 id="additional-functions">Additional functions:</h3>
<p>_.deburr(&#x201C;&#xE7;a d&#xE9;j&#xE0; t&#xF4;t&#x201D;) =&gt; ca deja tot<br>
_.startsWith(&#x201C;aaron&#x201D;, &#x201C;aa&#x201D;) -&gt; true<br>
_.endsWith(&#x201C;file.txt&#x201D;, &#x201C;.txt&#x201D;) =&gt; true<br>
_.repeat(&quot;=-&quot;, 3) =&gt; =-=-=-</p>
<p>Plus some other functions too long to detail: see doc for more.<br>
A <code>template</code> function allowing string interpolation.<br>
Two escape functions to escape some characters in HTML and regexp. There is also an unescape function.<br>
Three pad functions to fit a length.<br>
Three trim functions to remove characters (spaces by default) from left, right or both sides of a string.<br>
<code>trunc</code> cutting a string at given length and separator, with a continuation string (ellipsis by default).<br>
<code>words</code> cutting a sentence in words.</p>
<h2 id="function-functions">Function functions</h2>
<p>Ie. functions manipulating functions, aka. <em>higher-order</em> functions.<br>
See the FP article on the use cases for the functions.</p>
<p>We saw <code>partial</code> to pre-fill arguments, <code>ary</code> to reduce the number of parameters, <code>rearg</code> to change their order, and <code>negate</code> to invert the result of a predicate.</p>
<h3 id="time-related-functions">Time-related functions</h3>
<p><code>_.debounce(func, [wait=0], [options])</code><br>
<code>_.throttle(func, [wait=0], [options])</code><br>
These two functions seem similar, but differ in effect (of course!) and usage.<br>
They are used when a function is called frequently at irregular intervals. A typical example is a callback on user input. These functions limit the number of calls effectively done, to limit the pressure on the process.</p>
<p><code>debounce</code> prevents calling the function unless it hasn&#x2019;t be called for some time.<br>
For example, we set a callback on key press in a text field. There, we want to do an Ajax call to search for the text input so far. But we don&#x2019;t want to do too frequent calls if the user types quickly: we can have a new character before the previous request response arrives.<br>
So we wait for a pause in the typing to issue the request: we prevent calling the function, but if the function hasn&#x2019;t been called for a given time, then we really call the function with the latest result.</p>
<p><code>throttle</code> allows calling the function only once in a given interval.<br>
It is typically used to regulate a great amount of calls, like mouse moves (dragging) or scroll events.<br>
It cuts time in windows of given interval, and it blocks all calls except the last one of the window (or the first one if specified by an option).<br>
So when you have a stream of events to process, it samples these events to reduce the amount of processing.</p>
<h2 id="various-other-functions">Various other functions</h2>
<p>Lodash offers a number of functions to check the type of a given value:<br>
isUndefined, isNull,<br>
isObject, isArray, isFunction, isNative (function),<br>
isBoolean, isDate, isNumber, isRegexp, isString,<br>
isArgument, isError, isTypedArray, isElement (Dom element),<br>
isNaN, isFinite<br>
Their name is explicit enough to dispense of a short description. See doc for details.<br>
They a particularly useful to ensure an argument has been passed to a function.</p>
<p><code>_.isEmpty</code> checks if the given value is empty. Can check for arrays, objects, strings and jQuery-like collections,<br>
<code>_.isEqual</code> does a deep comparison between two values to determine if they are equivalent. A customizer function allows some fuzzy logic (eg. case-insensitive comparison, etc.).<br>
<code>_.isMatch</code> does a deep comparison to determine if the given object includes all the properties of the source object. Also accepts a customizer function.</p>
<p><code>_.clone</code> and <code>_.cloneDeep</code> create respectively a shallow and a deep clone of the given value. Accepts a customizer.</p>
]]></content>
    <summary type="html">
    <![CDATA[Presenting the JavaScript library Lodash]]>
    
    </summary>
    
      <category term="Functional programming" scheme="http://PhiLhoSoft.github.io/tags/functional-programming/"/>
    
      <category term="JavaScript" scheme="http://PhiLhoSoft.github.io/tags/javascript/"/>
    
      <category term="Library" scheme="http://PhiLhoSoft.github.io/tags/library/"/>
    
      <category term="Lodash" scheme="http://PhiLhoSoft.github.io/tags/lodash/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/tags/programming/"/>
    
      <category term="Tutorial" scheme="http://PhiLhoSoft.github.io/tags/tutorial/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/categories/programming/"/>
    
      <category term="JavaScript" scheme="http://PhiLhoSoft.github.io/categories/programming/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Adobe Brackets review]]></title>
    <link href="http://PhiLhoSoft.github.io/Software/Adobe%20Backets%20review/"/>
    <id>http://PhiLhoSoft.github.io/Software/Adobe Backets review/</id>
    <published>2015-09-25T11:24:00.000Z</published>
    <updated>2015-12-20T22:36:35.721Z</updated>
    <content type="html"><![CDATA[<h1 id="adobe-brackets-ide-for-the-web">Adobe Brackets - IDE for the Web</h1>
<p>Integrated Development Environment oriented toward the Web technologies</p>
<p><a href="http://brackets.io/">http://brackets.io/</a></p>
<h2 id="quick-review">Quick review</h2>
<p>I installed Brackets (v. 1.2 on Windows 7 with 8 GB of memory; currently at v.1.4), it went out quite smoothly, just asking for the directory where to install it.<br>
I opened it, it starts very fast.<br>
It has a dark UI but a light editing area. Not fan of dark theme, but I will try and keep it to see if it is effective to have a contrast between the UI and the editing area.<br>
Default syntax coloring theme looks OK so far. It can be changed with theme plugins.<br>
Actually, the UI theme cannot be changed easily, it needs a plugin to be able to modify it.<br>
There is no drag&#x2019;n&#x2019;drop of text by default, which is why I rejected this editor on my first try (before 1.0), because I use this operation a lot; but it has been introduced in this version, and the <a href="http://blog.brackets.io/2015/03/02/brackets-1-2-now-available/">blog post about this release</a> shows how to activate it.<br>
The editor is a bit primitive out of the box. You have to install several extensions to get things done efficiently&#x2026; That&#x2019;s OK because this keeps the application streamlined: no need to install CoffeeScript or Less extensions if you code only in JavaScript and use Sass&#x2026;<br>
There are not much settings either: you have to edit Json files to customize things. A bit less intuitive, but I am OK with that, as that&#x2019;s the way I customize ScITE, my favorite (general purpose) source code editor. And not having complex dialogs to set every option also keeps the application light.</p>
<p>After a few weeks of using Brackets, I appreciate it a lot: it is much less memory hungry than WebStorm or Eclipse, it is flexible and easy to use.<br>
I recommend it.</p>
<a id="more"></a>
<p>Still, I regret some base editor features are missing and must be fixed with extensions. Among them:</p>
<ul>
<li>Jump to matching brace (bracket / parenthesis);</li>
<li>Gutter selection of lines;</li>
<li>Recall previous searches / replacements;</li>
<li>Autofill of search field with text under caret (text has to be selected);</li>
<li>Show whitespace / end of lines / indentation guides / right margin;</li>
<li>Selection to upper / lower case; and some more.</li>
</ul>
<p>Some of these features has been addressed by adding extensions, but I feel these should be native.<br>
I will list here a number of these extensions I found useful.</p>
<p>I give the links to the GitHub projects, but the best way to install these extensions is to go to the Extension Manager in Brackets, to type (paste) the name of the extension and to install it from there. The manager also checks for updated and allows to install them easily.</p>
<h2 id="installed-extensions">Installed extensions</h2>
<h3 id="general-improvement">General improvement</h3>
<ul>
<li>
<p><strong>File Tree Exclude</strong></p>
<ul>
<li>Jon Wolfe (<a href="https://github.com/JonathanWolfe/">https://github.com/JonathanWolfe/</a>) - 0.6.3</li>
<li>Excludes folders (eg. containing generated stuff) from the file tree (less noise), find in files and quick open.</li>
<li><a href="https://github.com/JonathanWolfe/file-tree-exclude">https://github.com/JonathanWolfe/file-tree-exclude</a></li>
</ul>
</li>
<li>
<p><strong>Brackets Outline List</strong></p>
<ul>
<li>Jan Pilzer (<a href="https://github.com/Hirse">https://github.com/Hirse</a>) - 0.7.0</li>
<li>Display a list of the functions or definitions in the currently opened document.</li>
<li><a href="https://github.com/Hirse/brackets-outline-list">https://github.com/Hirse/brackets-outline-list</a></li>
</ul>
</li>
<li>
<p><strong>White Space Sanitizer</strong></p>
<ul>
<li>Miguel Castillo (<a href="https://github.com/MiguelCastillo">https://github.com/MiguelCastillo</a>) - 1.2.1</li>
<li>Help keep white spaces and tabs consistent. Also trims trailing whitespaces and ensures newline at end of file.</li>
<li><a href="https://github.com/MiguelCastillo/Brackets-wsSanitizer">https://github.com/MiguelCastillo/Brackets-wsSanitizer</a></li>
<li>See also <a href="https://github.com/adobe/brackets/wiki/How-to-Use-Brackets#preferences">https://github.com/adobe/brackets/wiki/How-to-Use-Brackets#preferences</a> to set up tab preferences per language</li>
</ul>
</li>
<li>
<p><strong>Show Whitespace</strong></p>
<ul>
<li>Dennis Kehrig (<a href="https://github.com/DennisKehrig">https://github.com/DennisKehrig</a>) - 2.0.1</li>
<li>Show indentation. Useful with the previous one&#x2026;</li>
<li><a href="https://github.com/DennisKehrig/brackets-show-whitespace">https://github.com/DennisKehrig/brackets-show-whitespace</a></li>
</ul>
</li>
<li>
<p><strong>Select Lines</strong></p>
<ul>
<li>Travis Almand (<a href="https://github.com/talmand">https://github.com/talmand</a>) - 1.3.0</li>
<li>Select lines by clicking / dragging in the gutter.</li>
<li><a href="https://github.com/talmand/Brackets-Select-Lines">https://github.com/talmand/Brackets-Select-Lines</a></li>
</ul>
</li>
<li>
<p><strong>Display Shortcuts</strong></p>
<ul>
<li>Randy Edmunds (<a href="https://github.com/redmunds">https://github.com/redmunds</a>) - 1.3.5</li>
<li>Display current keyboard shortcuts in a bottom panel that can be sorted and filtered.</li>
<li><a href="https://github.com/redmunds/brackets-display-shortcuts">https://github.com/redmunds/brackets-display-shortcuts</a></li>
<li>See also <a href="https://github.com/adobe/brackets/wiki/User-Key-Bindings">https://github.com/adobe/brackets/wiki/User-Key-Bindings</a> and <a href="https://github.com/adobe/brackets/blob/master/src/command/Commands.js">https://github.com/adobe/brackets/blob/master/src/command/Commands.js</a> to define (or change) your shortcuts.</li>
</ul>
</li>
<li>
<p><strong>Go to Matching Bracket</strong></p>
<ul>
<li>David Waterston (<a href="https://github.com/davidwaterston">https://github.com/davidwaterston</a>) - 2.1.0</li>
<li>Instantly locate and place the cursor on the matching bracket to the one under the cursor.</li>
<li>Shortcut: Ctrl+Alt+Right Arrow</li>
<li><a href="https://github.com/davidwaterston/goto-matching-bracket">https://github.com/davidwaterston/goto-matching-bracket</a></li>
</ul>
</li>
<li>
<p><strong>Rename JavaScript Identifier</strong></p>
<ul>
<li>Asger Feldthaus (<a href="https://github.com/asgerf">https://github.com/asgerf</a>) - 0.2.9</li>
<li>Intelligent renaming of JS variables.</li>
<li>Shortcut: Ctrl+R</li>
<li><a href="https://github.com/asgerf/bracket-rename">https://github.com/asgerf/bracket-rename</a></li>
</ul>
</li>
<li>
<p><strong>BracketstoIX</strong></p>
<ul>
<li>ApptoIX Limited (<a href="https://github.com/apptoix">https://github.com/apptoix</a>) - 3.2.0</li>
<li>Swiss knife toolset&#x2026; Useful: to upper or to lower case, single to double quote and back, RGB to hex colors and back, etc.</li>
<li>Shortcuts: use the Command Mapper to define them as you want. Use Display Shortcuts to see what is available or overridable.</li>
<li><a href="https://github.com/apptoix/bracketstoix">https://github.com/apptoix/bracketstoix</a> - <a href="http://www.apptoix.com/fr/bracketstoix.html">http://www.apptoix.com/fr/bracketstoix.html</a></li>
</ul>
</li>
</ul>
<h3 id="support-of-auto-completion-hinting-linting">Support of auto-completion, hinting &amp; linting</h3>
<ul>
<li>
<p><strong>Interactive Linter</strong></p>
<ul>
<li>Miguel Castillo (<a href="https://github.com/MiguelCastillo">https://github.com/MiguelCastillo</a>) - 1.0.5</li>
<li>Brings realtime JSHint/JSLint/CoffeeLint reports into Brackets as you work on your code, in form of margin indicators.</li>
<li><a href="https://github.com/MiguelCastillo/Brackets-InteractiveLinter">https://github.com/MiguelCastillo/Brackets-InteractiveLinter</a></li>
</ul>
</li>
<li>
<p><strong>SCSS Lint</strong></p>
<ul>
<li>chimo (<a href="https://github.com/chimo">https://github.com/chimo</a>) -  0.2.0</li>
<li>SCSS lint support.</li>
<li><a href="https://github.com/chimo/brackets-scss-lint">https://github.com/chimo/brackets-scss-lint</a></li>
</ul>
</li>
<li>
<p><strong>SASSHints</strong></p>
<ul>
<li>Konstantin Kobs (<a href="https://github.com/konstantinkobs">https://github.com/konstantinkobs</a>) - 1.1.0</li>
<li>Auto-completion for SASS/SCSS variables.</li>
<li><a href="https://github.com/konstantinkobs/brackets-SASShints">https://github.com/konstantinkobs/brackets-SASShints</a></li>
</ul>
</li>
<li>
<p><strong>Emmet</strong></p>
<ul>
<li>Sergey Chikuyonok (<a href="https://github.com/sergeche">https://github.com/sergeche</a>) - 1.2.2</li>
<li>Facilitates typing of HTML: div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p + Tab key procures a div with a header and a footer, the former with a list inside.</li>
<li><a href="https://github.com/emmetio/brackets-emmet">https://github.com/emmetio/brackets-emmet</a></li>
</ul>
</li>
<li>
<p><strong>Brackets Snippets</strong></p>
<ul>
<li>Edward Chu (<a href="https://github.com/chuyik">https://github.com/chuyik</a>) - 1.8.1</li>
<li>Imitate Sublime Text&#x2019;s behavior of snippets: insert snippets of code by typing an abbreviation and a shortcut key.</li>
<li><a href="https://github.com/chuyik/brackets-snippets">https://github.com/chuyik/brackets-snippets</a></li>
</ul>
</li>
<li>
<p><strong>Ternific</strong></p>
<ul>
<li>Miguel Castillo (<a href="https://github.com/MiguelCastillo">https://github.com/MiguelCastillo</a>) - 0.8.0</li>
<li>JavaScript hinting and refactoring powered by Tern.</li>
<li><a href="https://github.com/MiguelCastillo/Brackets-Ternific">https://github.com/MiguelCastillo/Brackets-Ternific</a></li>
</ul>
</li>
<li>
<p><strong>QuickDocsJS</strong></p>
<ul>
<li>Ole Kr&#xF6;ger (<a href="https://github.com/Wikunia">https://github.com/Wikunia</a>) - 1.6.7</li>
<li>Inline short documentation for JavaScript functions, including a summary,syntax and parameters.</li>
<li>Shortcut: Ctrl+K</li>
<li><a href="https://github.com/Wikunia/brackets-QuickDocsJS">https://github.com/Wikunia/brackets-QuickDocsJS</a></li>
</ul>
</li>
<li>
<p><strong>FuncDocr</strong></p>
<ul>
<li>Ole Kr&#xF6;ger (<a href="https://github.com/Wikunia">https://github.com/Wikunia</a>) - 0.8.26</li>
<li>Generates JS/PHPDoc annotations for your functions.</li>
<li>Shortcut: Ctrl+Alt+D</li>
<li><a href="https://github.com/Wikunia/brackets-FuncDocr">https://github.com/Wikunia/brackets-FuncDocr</a></li>
</ul>
</li>
</ul>
<h4 id="removed-because-interactive-linter-supports-them-anyway">Removed because Interactive Linter supports them anyway</h4>
<ul>
<li>
<p><strong>JSHint</strong></p>
<ul>
<li>Enable JSHint support, which can (should) supercedes JSLint. The latter is a bit too strict about &#x201C;rules&#x201D;. The former is very flexible.</li>
<li><a href="https://github.com/cfjedimaster/brackets-jshint">https://github.com/cfjedimaster/brackets-jshint</a></li>
</ul>
</li>
<li>
<p><strong>JSCS</strong></p>
<ul>
<li>JSCS <a href="http://jscs.info/">http://jscs.info/</a> support: JSHint supports some code style rules, but they are deprecated in favor of JSCS.</li>
<li><a href="https://github.com/globexdesigns/brackets-jscs">https://github.com/globexdesigns/brackets-jscs</a></li>
</ul>
</li>
<li>
<p><strong>CSSLint</strong></p>
<ul>
<li><a href="https://github.com/cfjedimaster/brackets-csslint">https://github.com/cfjedimaster/brackets-csslint</a></li>
</ul>
</li>
</ul>
<h3 id="other-tools">Other tools</h3>
<ul>
<li>
<p><strong>Brackets SASS</strong></p>
<ul>
<li>Jason San Jose (<a href="https://github.com/jasonsanjose">https://github.com/jasonsanjose</a>) - 2.0.3-132</li>
<li>Enable Live Preview and compile SASS files.</li>
<li><a href="https://github.com/jasonsanjose/brackets-sass">https://github.com/jasonsanjose/brackets-sass</a></li>
</ul>
</li>
<li>
<p><strong>Markdown Preview</strong></p>
<ul>
<li>Glenn Ruehle (<a href="http://github.com/gruehle">http://github.com/gruehle</a>) - 1.0.10</li>
<li>As the name implies&#x2026;</li>
<li><a href="https://github.com/gruehle/MarkdownPreview">https://github.com/gruehle/MarkdownPreview</a></li>
</ul>
</li>
<li>
<p><strong>Spell-check</strong></p>
<ul>
<li>Jochen Hagentr&#xF6;m (<a href="https://github.com/couzteau">https://github.com/couzteau</a>) - 0.5.8</li>
<li>As the name implies&#x2026; Not real time.</li>
<li><a href="https://github.com/couzteau/SpellCheck">https://github.com/couzteau/SpellCheck</a></li>
</ul>
</li>
<li>
<p><strong>Perforce</strong></p>
<ul>
<li>Joshua Galvin (<a href="https://github.com/JoshGalvin">https://github.com/JoshGalvin</a>) - 1.0.1</li>
<li>Enables Perforce source control integration (no GUI, just check out / add / delete files when dirty).</li>
<li><a href="https://github.com/JoshGalvin/brackets-perforce">https://github.com/JoshGalvin/brackets-perforce</a></li>
</ul>
</li>
<li>
<p><strong>SVG Preview</strong></p>
<ul>
<li>Peter Flynn (<a href="https://github.com/peterflynn">https://github.com/peterflynn</a>) - 1.3.0</li>
<li>Live preview SVG files inline as you edit them</li>
<li><a href="https://github.com/peterflynn/svg-preview">https://github.com/peterflynn/svg-preview</a></li>
</ul>
</li>
</ul>
<h3 id="extensions-that-might-be-installed-someday">Extensions that might be installed someday</h3>
<ul>
<li>
<p><strong>Beautify</strong></p>
<ul>
<li>Format JavaScript, HTML, and CSS files</li>
<li><a href="https://github.com/drewhamlett/brackets-beautify">https://github.com/drewhamlett/brackets-beautify</a></li>
</ul>
</li>
<li>
<p><strong>Git</strong></p>
<ul>
<li><a href="https://github.com/zaggino/brackets-git">https://github.com/zaggino/brackets-git</a></li>
</ul>
</li>
</ul>
<h4 id="removed">Removed</h4>
<ul>
<li><strong>Various Improvements</strong>
<ul>
<li>Add more information in the status bar, lowercase and uppercase converter, super clipboard, button close all folders in file tree, files search.</li>
<li><a href="https://github.com/Dammmien/brackets-various-improvements">https://github.com/Dammmien/brackets-various-improvements</a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[a review of the Brackets IDE for the Web, at version 1.5]]>
    
    </summary>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/tags/ide/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/tags/software/"/>
    
      <category term="Tool" scheme="http://PhiLhoSoft.github.io/tags/tool/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/categories/software/"/>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/categories/software/ide/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Functional Programming: a Brief, Pragmatic Overview]]></title>
    <link href="http://PhiLhoSoft.github.io/Programming/Functional%20programming%20introduction/"/>
    <id>http://PhiLhoSoft.github.io/Programming/Functional programming introduction/</id>
    <published>2015-09-19T22:00:00.000Z</published>
    <updated>2015-12-20T23:24:07.752Z</updated>
    <content type="html"><![CDATA[<h1 id="functional-programming-a-brief-pragmatic-overview">Functional Programming: a Brief, Pragmatic Overview</h1>
<p>Functional Programming (FP) is a programming paradigm, like imperative (procedural) programming or object-oriented programming (OOP).<br>
Some people oppose these paradigms, but actually they are not exclusive of each other: we do imperative programming inside OOP&#x2019;s methods, and we can mix OOP and FP: that&#x2019;s even a trend in modern languages (Scala, Ceylon, &#x2026;) and in older ones (JavaScript, Java 8&#x2026;).</p>
<h2 id="why-functional-programming">Why functional programming?</h2>
<p>FP exists for years, but it was rather confined to niche languages. It started to infuse in the mainstream coding practices via the above mentioned languages or libraries like Guava (Java) or Underscore / Lodash (JavaScript).<br>
By promoting stateless functions and immutable data, it proved to be very efficient and easy to control in concurrent programming, leading to efficient processing of big data.<br>
It is also easy to test. Its rather declarative style is also easy to read.<br>
And reactive functional programming (FRP) is a powerful paradigm to process asynchronously big streams of data as well as user input.</p>
<p>Given all these qualities, why isn&#x2019;t more popular?</p>
<p>Very popular languages like C++ or Java are based on OOP, which is easy to grasp: we can relate objects to the real world. So there were a generalization of OOP thinking.<br>
On the other hand, FP comes from lambda calculus, a &#x201C;formal system in mathematical logic&#x201D;. Ie. it has strong mathematical roots, thus some of its concepts can be quite abstract, and it shows when most people explain its concepts. Combined with strong typing, based on type theory, like in Haskell, we quickly end with abstract concepts with specialized jargon. Plus Haskell, one of the most popular FP languages, has a syntax not intuitive for the uninitiated.</p>
<p>Fortunately, as said, some people extracted some core ideas from FP, and exposed them in easier to understand languages and libraries (see above). This helped in spreading these practices in mainstream programming.</p>
<a id="more"></a>
<h2 id="brief-pragmatic">Brief? Pragmatic?</h2>
<p>This article is rather long, but only scratches the surface. One can write a <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/">whole book</a> on the topic.<br>
So it is only a <strong>brief overview</strong>. Masters and purists of FP will frown upon many omissions and perhaps inaccuracies. I am not a master and certainly not a purist, and don&#x2019;t plan to be one of the latter. I probably won&#x2019;t complete the article with finer points of FP (monads, etc.) but I will try and fix any inaccuracies that I spot or that are reported.</p>
<p>It is <strong>pragmatic</strong> because I use several FP techniques, as popularized by some libraries or languages, but I don&#x2019;t use the full spectrum of FP possibilities.</p>
<h2 id="core-concepts">Core concepts</h2>
<p>So, what functional programming is about?<br>
As the name implies, like OOP is all about objects, FP is all about functions.<br>
These are first-class citizens: they can be stored in variables and collections, they can be passed as arguments to functions which can return a function. You get the idea&#x2026;<br>
Note: functions manipulating functions are called <em>higher-order functions</em>. I will spray a bit of FP jargon here, for your information; for something more complete, see <a href="https://github.com/hemanth/functional-programming-jargon">Functional programming jargon</a>, an accessible, work-in-progress glossary.</p>
<p>A central idea behind FP is to use <em>pure</em> functions: they must not change the world outside of them. A pure function will always return the same output for a given input. It is called <em>idempotency</em> and <em>referential transparency</em>. The later means that if a pure function is called with a constant, it can be replaced with the value it returns.<br>
Of course, a real program has to alter its environment: to take some data, to output some results, perhaps to react to user input.<br>
Pure FP isolates these <em>side-effects</em> in a special concept: <em>monads</em>. Which I won&#x2019;t attempt to explain here!<br>
Choosing the pragmatic approach, I tolerate functions with side-effects, but avoid them as much as possible, documenting these side-effects and, ideally, isolating them in specific modules. Which is a good practice for unit tests&#x2026;</p>
<p>As a consequence, FP favors <em>immutable</em> data. Functions avoid to mutate the data given as input (that would introduce side-effects), but return new data instead.<br>
It might seem inefficient but there are techniques to optimize this practice. Among them, <em>lazy evaluation</em> defers processing until the result is really needed. This is particularly effective when chaining several operations, which is a very common practice in FP, as we will see.</p>
<p>FP doesn&#x2019;t like loops (those made with <code>for</code>, <code>while</code>, <code>repeat</code>, etc. keywords). These are stateful constructs, with one or more loop variables. FP often uses recursion instead, thus purely relying on functions. But to be effective, the language must support <em>tail-call recursion</em> to avoid bloating the call stack. This means that a function returning the result of calling itself can avoid to push a call reference (to return to the calling point) and can instead jump directly into the new call. Yes, that&#x2019;s a kind of goto&#x2026;<br>
Recursion can be hard to get right, and some languages like Java or JavaScript (up to ES6) don&#x2019;t support tail-call recursion, so it is rarely used outside of specialized usages like iterating on tree or graph nodes.<br>
Fortunately FP offers a wide range of functions to process (or create) collections, which are the most common use case for loops. We will extend on this topic later.</p>
<p>Another important concept in FP is <em>closures</em>. When a function returns another function, the inner one can use outer variables in its scope. In general, it is limited to the immediate scope, ie. variables and parameters of the enclosing function. It is a capture of the state of these variables at the time the function is returned. We say the inner function <em>closes</em> over these values, hence the closure name.<br>
It is a double edged sword, as these captured variables might be mutated, introducing state in the function, something that FP avoids&#x2026;<br>
Let&#x2019;s make an example for this rather abstract concept. I use JavaScript (ES6) here. I make a generic function that can return specialized variants:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> adder = (step) =&gt;</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">return</span> (v) =&gt; v + step;</span><br><span class="line">};</span><br><span class="line"><span class="comment">// The above is verbose for clarity.</span></span><br><span class="line"><span class="comment">// It can be written:</span></span><br><span class="line"><span class="comment">// adder = step =&gt; v =&gt; v + step</span></span><br><span class="line"><span class="keyword">const</span> plusplus = adder(<span class="number">1</span>);</span><br><span class="line">plusplus(<span class="number">5</span>); <span class="comment">// -&gt; 6</span></span><br><span class="line"><span class="keyword">const</span> decr = adder(-<span class="number">1</span>);</span><br><span class="line">decr(<span class="number">43</span>); <span class="comment">// -&gt; 42</span></span><br></pre></td></tr></table></figure>
<p>Note that a function can have state that doesn&#x2019;t affect its idempotency. A common example in FP is <em>memoization</em>. A function with a long computation time (Fibonacci, is prime, etc.) can keep previous results. Thus, if asked again with a previously computed argument, it can just return the previous result. It is particularly effective with functions whose computing of a value is based on results for lower values. The given recursive functions above are good examples.</p>
<h2 id="avoiding-loops">Avoiding loops</h2>
<p>Since I started to use the FP style of coding in a JavaScript project, using the Lodash library, I no longer use the for loop. Or other forms of loops, which are rarely used anyway.<br>
If you look at the loops in your code, you will see some very common patterns of usage.<br>
<code>for</code> loops can be used to iterate an arbitrary number of times to perform an action. Eg. creating objects to put in a collection (or the Dom, etc.).<br>
But most of the time, they are used to iterate on a collection: entries of an array or a list, characters of a string, values of a map or set, etc. &#x201C;Collection&#x201D; is used here in the widest sense, data structure that can hold several items in variable number. Tree or graphs are more often explored with recursive functions, but the language / library can offer iterators flattening them with various strategies.</p>
<p>So why do we iterate on these collections?<br>
Sometime, it is to find an item. It can be also to compute a value (sum, average&#x2026;). Or to process each item, perhaps to transform them into something else. We might want to remove some items, or to process only some items, based on some criteria. Or to process (or extract / remove) only the n first or last items of the list, n being arbitrary on depending on a condition. Other common usage is sorting, removing duplicates, etc.</p>
<p>FP got us covered for all these cases, and more.<br>
The philosophy is similar to the Unix one, which offers lot of small utilities focused on a simple task. They have all a similar interface: accept data on standard input, spit out processed data on standard output, and they are chained via pipes.<br>
FP offers lot of small functions focused on a simple task. They generally take a collection and a function to process each item.<br>
These small functions can be used alone, but they shine when they are chained together. For example, you can take a list, filter out some elements, keep only the unique items and transform the remaining ones, in one operation.<br>
That leads to a rather declarative style of programming (a bit like SQL) which is generally more readable than a bunch of conditions, intermediary variables, sub-loops, etc. that re-implement the same old algorithms&#x2026;</p>
<p>Contrived example: given an array of numbers, eliminate those below 10, keep only the first five, and sum them.<br>
In a C-like language, that would be something like:</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var i, v, r, c; <span class="comment">// assume they start at zero</span></span><br><span class="line">for <span class="comment">(i = 0; i &lt; values.length; i++)</span></span><br><span class="line">{</span><br><span class="line">  v = values[i];</span><br><span class="line">  <span class="keyword">if</span> <span class="comment">(v &gt;= 10)</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> <span class="comment">(c++ &lt; 5)</span> <span class="comment">// beware of off-by-one errors!</span></span><br><span class="line">    {</span><br><span class="line">      r += v;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// I forgot else break, a too common error!</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>In functional style:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> r = chainOn(values)</span><br><span class="line">  <span class="built_in">.</span>filter(v =&gt; v &gt;= <span class="number">10</span>)</span><br><span class="line">  <span class="built_in">.</span><span class="keyword">take</span>(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">.</span><span class="keyword">sum</span>();</span><br></pre></td></tr></table></figure>
<p>A nearly literal transcription of the requirement! Much more readable: the intent appears immediately.</p>
<p>As said, each function returns a new collection, but a good library does lazy evaluation, deferring process until the end of the chain, building a complex function out of the bricks, generating only one final collection (or none in this example).</p>
<h2 id="commonly-used-functions">Commonly used functions</h2>
<p>Let&#x2019;s take a look at the most common functions (also called <em>operations</em> or even <em>operators</em>). For clarity, I give a name to each, but these names can vary, depending on language / library. For example, <code>reduce</code> can be named <code>reduceLeft</code>, <code>fold</code>, <code>foldLeft</code>, etc. But their base idea is the same everywhere.<br>
Note that the order of parameters can change, depending on language / library.<br>
Nearly all these operations take a collection as input, and most of them also take a function called on each iteration on the collection, thus named <em>iteratee</em>. Or <em>predicate</em> if it returns a boolean.<br>
The parameters given to iteratees vary, but always include the current item. They can also include the index in the array or the key in the map, sometime a reference to the collection itself, etc.<br>
Note: I will use either the term list or array to talk about ordered collections. In some languages they are the same, in others not, but the differences are not relevant for that article.</p>
<p><code>forEach</code> (or <code>for</code>, <code>forAll</code>, <code>each</code>, etc.) is just a functional version of our old <code>for</code> loop. It has a <code>forEachRight</code> (or <code>eachRight</code>, etc.) variant iterating on reverse order.<br>
The advantage of this function is that it can be used at the end of a filter / transform / etc. chain.<br>
It is (should be) used only to produce side-effects for each item: create elements in the Dom, serialize the item, issue a Rest request, etc.<br>
There is a variant, called <code>tap</code> or <code>do</code>, that can be put in the middle of the chain: it doesn&#x2019;t alter the data but can do side-effects at this point of the processing.</p>
<p><code>reduce</code> (synomyms above) is a fundamental operation: it can be used to do all the other ones. As such, it should be used only in special cases, as more expressive and terser (simpler) operations should be preferred.<br>
It takes three parameters: the collection, the processing function and an initial value.<br>
The iteratee is called with a parameter (named <em>accumulator</em>) holding first the initial value, then the value returned in the previous iteration.<br>
The second parameter is the item itself.<br>
The function processes the item and alters the accumulator, then returns the latter.<br>
The initial value / accumulator can be a number, a collection (often empty), etc.<br>
For a number, the function can sum up the values in the accumulator, or store the min or max, etc. It can push or add values in a collection accumulator. Etc.<br>
The <code>reduce</code> function returns the final value of the accumulator. It is called thusly because it <em>reduces</em> (or <em>folds</em>) the items of a collection to a single value.</p>
<p><code>range</code> allows to create a list of numbers (or characters) between two bounds. This list can be used as an entry point for other functions, thus effectively replacing the numerical <code>for</code> loop.</p>
<p><code>find</code> searches the collection and returns the found item, if any (behavior if not found varies with language). The iteratee is a predicate, inspecting the item and telling if that&#x2019;s the right one. If so, it stops there and returns the found item.<br>
A variant for ordered collections, <code>findIndex</code>, returns the position of the item instead.<br>
On ordered collections, we can use <code>findLast</code> or <code>findRight</code>, iterating on the items in reverse order. These suffixes can be found on other operations for lists or similar.</p>
<p><code>filter</code> returns a reduced version of the collection, keeping the items for which the predicate returns true. It has a variant, <code>reject</code>, dropping items whose predicate is true.<br>
You might wonder why we have two functions when you just have to invert the condition in the predicate. Actually, we have a number of predefined predicates like <code>isNumber</code> or <code>isEmpty</code>. So if you want to remove empty arrays (or strings) out of a collection, you can just use <code>reject(coll, isEmpty)</code>.<br>
You can also do <code>filter(coll, negate(isEmpty))</code>, but the intent is less clear. Still it is a good first example of a function altering the behavior of another function. We will see more later.</p>
<p>Variants on ordered collections allow to keep the first (or last) items, based on a predicate: <code>takeUntil</code> keeps items until the predicate is true, <code>takeWhile</code> keeps them while the predicate is true. <code>take</code> keeps the number of items given as argument.<br>
The <code>Last</code> (or <code>Right</code>) suffix is applicable. And you can replace <code>take</code> with <code>drop</code> to keep the other part of the list.<br>
There are specialized variants for one item, a common operation: <code>first</code>, <code>last</code>, <code>rest</code>, <code>initial</code> keep or drop the first or last item of a list.</p>
<p><code>zip</code> takes a number of arrays / lists, and returns an array of arrays, where the first one groups the first items of the arrays, the second one holds the second items, etc.<br>
For example, you can make an array of <code>[ x, y ]</code> coordinates from an array of <code>x</code>s and one of <code>y</code>s. Or you can associate items with values of a range.<br>
There is an <code>unzip</code> operator doing the reverse operation.</p>
<p><code>map</code> transforms the items of a collection into something else collected in a new collection of same kind. It can be used to transform objects of some type to another type, to extract a value from objects, etc.</p>
<p><code>every</code> or <code>all</code> returns true if the iteratee returns true for all the items of the collection.<br>
<code>some</code> or <code>any</code> returns true if the iteratee returns true for at least one item.</p>
<p>There are lot of other functions, to sort or shuffle an array, to randomly sample some values, to eliminate duplicates, etc.<br>
Explore your library, get familiar with its capacities, to know the palette of tools at your disposal; you can dig more on their usage when you need them.</p>
<h2 id="function-processing">Function processing</h2>
<p>As we saw, there are functions to alter functions, to alter their signature to something expected.<br>
It eases reusability: you have lot of simple functions, from libraries or your own. You can <em>compose</em> (combine) these functions into more powerful functions.<br>
But sometime, the signature of a function of your palette doesn&#x2019;t fit what is expected in the composition.<br>
You can wrap manually the function to adapt it:<br>
<code>filter(numbers, function (n) { return !isPrime(n); }</code><br>
But it is verbose and tiresome.<br>
Or you can use a higher-order function automatically transforming (wrapping) the function:<br>
<code>filter(numbers, negate(isPrime));</code><br>
This <code>negate(isPrime)</code> way of providing a function is called <em>point-free style</em> (or <em>tacit programming</em>). This is because the parameters (<em>points</em>) are not visible, they are tacit, implicit.<br>
More on this later, but let see other examples first.</p>
<p>Let say we have a <code>toNumber</code> function taking a base (2, 10, 16&#x2026;) and a string to convert. If the base is omitted, it default to 10. We need to convert an array of strings.<br>
We can use <code>map</code> for that. If the numbers are hexadecimal, we can write in JS:</p>
<p>numbers = map(hexaStrings, function (s) { return toNumber(16, s); });</p>
<p>A bit verbose (can be better with arrow notation), not very readable.<br>
But we have a JS method named <code>bind</code>, or a (simpler) Lodash method named <code>partial</code>, that can preset the first parameters of a function.</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = map<span class="list">(<span class="keyword">hexaStrings</span>, partial<span class="list">(<span class="keyword">toNumber</span>, <span class="number">16</span>)</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>It takes a function with n parameters, and returns a function with less parameters, some of the original parameters being preset.<br>
Such operation is called <em>partial application</em>. Or, if only one parameter remains, <em>currying</em>. The latter has a special name because it is an important process to help in <em>function composition</em>, combining functions to make a complex one.</p>
<p>If the array had decimal numbers in strings, we could use the default value of the base parameter. But the base being the first parameter, we cannot pass it directly to <code>map</code>. No problem, we have a function able to reorder the parameters of a function:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = map<span class="list">(<span class="keyword">decimalStrings</span>, rearg<span class="list">(<span class="keyword">toNumber</span>, [ <span class="number">1</span>, <span class="number">0</span> ])</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>The second parameter (index 1) becomes the first one, while the first one goes to the second place.<br>
<code>partial</code> is better there, but this contrived example aims to show a semi-realistic use case of <code>rearg</code>&#x2026;<br>
But actually, <code>map</code> calls the function with two parameters: the value and its index! So we convert the strings to bases 0, 1, 2, etc. Not what it was intended!<br>
Fortunately, there is a function for that&#x2122;&#x2026; A function that reduces the number of parameters of a function. This number, BTW, is called <em>arity</em>. The function (in Lodash) is called <code>ary</code>:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = map<span class="list">(<span class="keyword">decimalStrings</span>, ary<span class="list">(<span class="keyword">rearg</span><span class="list">(<span class="keyword">toNumber</span>, [ <span class="number">1</span>, <span class="number">0</span> ])</span>, <span class="number">1</span>)</span><span class="comment">;</span></span></span><br></pre></td></tr></table></figure>
<p>Now, it is really less readable but the point was to show we can manipulate functions like we process collections.</p>
<p>Somehow, we can often describe a process with a list of functions / operations: filter, map, sort, uniqueItems, map, take, for example. We could put these in an array, and apply these functions successively. Some languages make an heavy usage of this scheme and have a syntax for these chains of functions.<br>
For this kind of chaining, it is easier if all these functions take only one parameter: the result of one function is fed as argument to the next function. That&#x2019;s why currying is so important.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As said, I only scratched the surface of the topic, yet I introduced lot of concepts that are useful and practical in daily tasks of your favorite language. Although I admit in some languages like pre-8 Java, the syntax (with anonymous classes) can be a bit heavy.</p>
<p>FP techniques proved to be useful enough that some languages (Java 8 again, JavaScript at ES6 / ES2015) evolved to ease their usage. And lot of new ones integrated them from the start.</p>
<p>I hope this article will give you the will to use (more) these techniques, and perhaps to dig more into it.</p>
]]></content>
    <summary type="html">
    <![CDATA[Tutorial about functional programming, short and practical]]>
    
    </summary>
    
      <category term="Functional programming" scheme="http://PhiLhoSoft.github.io/tags/functional-programming/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/tags/programming/"/>
    
      <category term="Tutorial" scheme="http://PhiLhoSoft.github.io/tags/tutorial/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/categories/programming/"/>
    
      <category term="General" scheme="http://PhiLhoSoft.github.io/categories/programming/general/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Microsoft Visual Studio Code review]]></title>
    <link href="http://PhiLhoSoft.github.io/Software/Microsoft%20Visual%20Studio%20Code%20review/"/>
    <id>http://PhiLhoSoft.github.io/Software/Microsoft Visual Studio Code review/</id>
    <published>2015-07-12T09:06:00.000Z</published>
    <updated>2015-12-19T11:00:15.714Z</updated>
    <content type="html"><![CDATA[<h1 id="microsoft-visual-studio-code-review">Microsoft Visual Studio Code review</h1>
<p>Integrated Development Environment oriented toward the Web technologies</p>
<p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<h2 id="quick-review">Quick review</h2>
<p>I installed Visual Studio Code (v. 0.10.3 on Windows 7 with 8 GB of memory).<br>
I opened it, it starts reasonably fast.<br>
It has a dark UI, which I don&#x2019;t like, but I quickly found where to change this to the default light theme. Good point than several themes are bundled by default: no need to hunt for them.</p>
<p>Surprisingly, drag&#x2019;n&#x2019;drop of code isn&#x2019;t enabled.<br>
Apparently, it doesn&#x2019;t even exist!<br>
<a href="http://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7763958-drag-n-drop-selections">http://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7763958-drag-n-drop-selections</a></p>
<p>Same for column (rectangular) selections!<br>
<a href="https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7761618-implement-column-mode-selection-editing">https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7761618-implement-column-mode-selection-editing</a></p>
<p>These are features I use extensively in all editors / IDEs I use, I feel cripled if I don&#x2019;t have them&#x2026;</p>
<p>End of test&#x2026; See you later.</p>
]]></content>
    <summary type="html">
    <![CDATA[a review of the Visual Studio Code IDE, at version 0.10]]>
    
    </summary>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/tags/ide/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/tags/software/"/>
    
      <category term="Tool" scheme="http://PhiLhoSoft.github.io/tags/tool/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/categories/software/"/>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/categories/software/ide/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to test if a variable or property is defined in JavaScript]]></title>
    <link href="http://PhiLhoSoft.github.io/Programming/Test%20if%20variable%20or%20property%20is%20defined%20in%20JS/"/>
    <id>http://PhiLhoSoft.github.io/Programming/Test if variable or property is defined in JS/</id>
    <published>2015-03-20T17:20:00.000Z</published>
    <updated>2015-12-18T09:20:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="how-to-test-if-a-variable-or-property-is-defined-in-javascript">How to test if a variable or property is defined in JavaScript</h1>
<h2 id="the-problem">The problem</h2>
<p>There are several use cases for testing if a variable or property is defined. We will examine them before examining the ways to check the state.</p>
<ul>
<li>
<p>Check if a global variable exists.<br>
Of course, in our code, we carefully avoid to create global variables&#x2026; We use <code>var</code> each time we declare a variable, and <code>&apos;use strict&apos;;</code> guards against forgetting it. Of course, we have <code>&apos;use strict&apos;;</code> everywhere, and an ESLint, JSHint or similar tool configuration to enforce it.<br>
But still, we can have global variables, at least when we load &#x2018;old-school&#x2019; (not AMD / CommonJS enabled) libraries: jQuery&#x2019;s <code>$</code> and Underscore / Lodash&#x2019;s <code>_</code> are famous examples.<br>
In generic code, we might want to check if these variables are defined, and if not, to provide an alternative implementation.<br>
Reminder: in a browser, these global variables are attached to the <code>window</code> object.<br>
In the general case, we have two scenarii: the variable is not declared at all, or it is declared but no value has been assigned to it yet.<br>
In the first case, if we try to use it, we will have an error (ReferenceError) complaining about a non-existing variable.<br>
In the second case, the variable has the value <code>undefined</code>.</p>
</li>
<li>
<p>Check if a local variable exists.<br>
Actually, I will ignore this one: it is the same case than the first one, and a simple look at the code around is better than coding a check! It is here only for exhausting the cases&#x2026;</p>
</li>
<li>
<p>Check if a property is defined on an object.<br>
That&#x2019;s the most common case. It can be used against global objects (eg. to see if a browser object has one of the latest features), against library objects (to handle old versions or optional features), against function parameters (optional properties on a parameter), etc.</p>
</li>
<li>
<p>Check if a function parameter is defined.<br>
A function expecting a number of parameters can be called with only part of them, or even none.<br>
In this case, the missing parameters (at the end of the list) are declared but have the value <code>undefined</code>.</p>
</li>
</ul>
<a id="more"></a>
<h2 id="the-possible-checks">The possible checks</h2>
<p>JavaScript offers several ways to do this check. What is the &#x201C;best&#x201D; one?<br>
As often, the answer is: &#x201C;It depends&#x201D;&#x2026;</p>
<h3 id="typeof-v">typeof v</h3>
<p>A rather universal / safe way is to use the <code>typeof</code> operator:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> someIdentifier == <span class="string">&apos;undefined&apos;</span>)</span><br></pre></td></tr></table></figure>
<p>Advantage: it works in all cases, even when the variable is not declared at all (that&#x2019;s the only case where we can use an undeclared variable without throwing an error). But honestly, it is verbose / cumbersome&#x2026; :-) And I dislike using strings in code like that: if you type <code>&apos;undfined&apos;</code> instead, it can go unnoticed for a long time&#x2026;<br>
Note: since <code>typeof</code> is guaranteed to return a string result, we can use the <code>==</code> check. You might prefer to use <code>===</code> comparison if that&#x2019;s the policy of your project (which might be enforced by some tools).</p>
<h3 id="v-undefined">v === undefined</h3>
<p>A simpler way to do the check is to compare against <code>undefined</code>:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (someIdentifier === <span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure>
<p>Beware: don&#x2019;t use <code>==</code> as automatic type conversions done by JavaScript will bite you!</p>
<p>Some people object that this method can be flawed because JavaScript doesn&#x2019;t prevent from assigning a value to <code>undefined</code>:<br>
<code>undefined = {};</code> is legal!<br>
Now, it is unlikely to happen, unless somebody made a programming mistake like forgetting an <code>=</code> in an oddly constructed test: <code>if (undefined = foo)</code>.<br>
If you include in your code base some code from an inattentive adept of Yoda conditions, you have a bigger problem than you thought&#x2026; :-)<br>
And ECMAScript 5, implemented in all major modern browsers, now prevent this, making (at least!) <code>undefined</code> immutable.<br>
So, unless you target very old browsers, it is safe, short and explicit.</p>
<h3 id="if-v">if (v)</h3>
<p><code>if (foo)</code><br>
<em>or</em><br>
<code>if (foo.bar)</code></p>
<p>I mention it because its usage is common. But it is generally a bad way to do the check.<br>
First, the first form fails (with the error &#x201C;ReferenceError: foo is not defined&#x201D;) if the variable is not defined at all. Now, the check is generally done for a property or local variable / parameters, which is safer. Note that so called global variables are, on the browser, properties of the <code>window</code> object, so instead of writing <code>if (foo)</code>, we can always write <code>if (window.foo)</code>, and it won&#x2019;t crash as in the first form.<br>
Second, it is a brittle check: it will fail if <code>foo.bar</code> is undefined, as expected, but also if it is &#x201C;falsey&#x201D;, the JavaScript term for all values evaluated as false because of type coercion. So it also fails if <code>foo.bar</code> is defined but has the value <code>false</code>, or is an empty string, or zero, or <code>null</code>, etc.<br>
Not very trustworthy&#x2026;<br>
To be honest, this form of test is mostly used when <code>foo.bar</code> is expected to be a function, to check if we can call it or not. In this case, it is unlikely to be 0 or &#x2018;&#x2019; or false&#x2026;<br>
It is also OK if the variable / property must be an object. It is often used in the idiom <code>var x = foo &amp;&amp; foo.bar;</code> to avoid getting a property on an undefined object.</p>
<h3 id="yourlibraryisdefined-or-somelibraryisstring">yourLibrary.isDefined() or someLibrary.isString()</h3>
<p>Several libraries offer facilities to properly do this check.</p>
<p>AngularJS offers several functions for that: <code>isDefined()</code>, <code>isUndefined()</code>, but also specialized functions to check if a variable is defined and has the proper type:</p>
<ul>
<li>angular.isArray</li>
<li>angular.isDate</li>
<li>angular.isElement</li>
<li>angular.isFunction</li>
<li>angular.isNumber</li>
<li>angular.isObject</li>
<li>angular.isString</li>
</ul>
<p>Underscore and Lodash have similar functions:</p>
<ul>
<li>_.isElement</li>
<li>_.isArray</li>
<li>_.isObject</li>
<li>_.isArguments</li>
<li>_.isFunction</li>
<li>_.isString</li>
<li>_.isNumber</li>
<li>_.isBoolean</li>
<li>_.isDate</li>
<li>_.isRegExp</li>
<li>_.isError</li>
<li>_.isFinite</li>
<li>_.isNaN</li>
<li>_.isNull</li>
<li>_.isUndefined</li>
</ul>
<p>Lodash has some more functions:</p>
<ul>
<li>_.isNative</li>
<li>_.isPlainObject</li>
<li>_.isTypedArray</li>
</ul>
<p>jQuery also has checks:</p>
<ul>
<li>jquery.isArray</li>
<li>jquery.isFunction</li>
<li>jquery.isNumeric</li>
<li>jquery.isPlainObject</li>
<li>jquery.isWindow</li>
<li>jquery.isXMLDoc</li>
</ul>
<p>And so on.</p>
]]></content>
    <summary type="html">
    <![CDATA[Shows various ways to test if a variable or a property is defined in JavaScript]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://PhiLhoSoft.github.io/tags/javascript/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/tags/programming/"/>
    
      <category term="Tutorial" scheme="http://PhiLhoSoft.github.io/tags/tutorial/"/>
    
      <category term="Programming" scheme="http://PhiLhoSoft.github.io/categories/programming/"/>
    
      <category term="JavaScript" scheme="http://PhiLhoSoft.github.io/categories/programming/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JetBrains WebStorm review]]></title>
    <link href="http://PhiLhoSoft.github.io/Software/JetBrains%20WebStorm%20review/"/>
    <id>http://PhiLhoSoft.github.io/Software/JetBrains WebStorm review/</id>
    <published>2015-03-02T10:42:00.000Z</published>
    <updated>2015-12-19T11:00:15.346Z</updated>
    <content type="html"><![CDATA[<h1 id="jetbrains-webstorm-review">JetBrains WebStorm review</h1>
<p>For Java coding, I elected Eclipse as my main IDE. I tried NetBeans, and appreciated it, but at the time, it was Java-centric so I went back to Eclipse instead, more polyglot. Now, NetBeans is more versatile, but now I know Eclipse well, with its quirks, warts and all, so I remain there.<br>
When I had to code JavaScript (with AngularJS, how original!) at work, for a new project, I naturally tried to use Eclipse, with an Angular plugin. It wasn&#x2019;t so bad, but still a bit frustrating, with no renaming of local variables, loosing the capability to drag&#x2019;n&#x2019;drop code in CSS or HTML editors (a long-standing bug&#x2026;), and some other frustrations.<br>
A colleague advised to try WebStorm.<br>
At first, I was a bit reluctant. First, it is a payware, something I usually avoid. Of course, there is chance my company finally pays for the software, if it was a real productivity tool. But then, that&#x2019;s something that I would use at work, and couldn&#x2019;t use at home (I have zero software budget&#x2026;).<br>
Secondly, I tried IntelliJ IDEA some years ago, and wasn&#x2019;t convinced. Perhaps it was less mature than now, or perhaps I didn&#x2019;t try hard enough, but I went back to my Eclipse quite quickly.</p>
<a id="more"></a>
<p>Well, I installed it (v. 9.0.3 on Windows 7 with 8 GB of memory) and, as usual in a first contact, I went to the settings, to get a first feel of the capabilities of the application. They are quite complete, yet not overwhelming.<br>
I first chose the Eclipse keyboard configuration, allowing me to find back a familiar interface. And I customized some that I also customize on Eclipse (to find back shortcuts I use in my favorite source code editor, SciTE). It went well and fast.</p>
<p>I also customized the color settings. IIRC, it defaults to a dark theme, which I dislike. I chose a clear theme, and customized the colors to my taste. It is quite flexible, too.<br>
Lastly, I changed the JavaScript formatting to follow the rules we use at work. Also easy and flexible, with still some quirks that have corresponding open issues in their backlog.</p>
<p>One surprise: I imported our project, I selected Perforce (the VCS we use at work) as VCS for it (or it even proposed it, perhaps because it found a .p4ignore file), and it went forward without asking any question (except my password), finding settings in the environment variables. The VCS integration is rather well made.</p>
<p>I have collected a little list of pros and cons:</p>
<p>PROS</p>
<ul>
<li>Good auto-completion. It first propose local occurrences, then some more distant ones. See a cons for this feature, though.</li>
<li>It is aware of file paths in code (in script tags): if I delete a JS file, it can warn it is still used in some source code.</li>
<li>Good renaming facility, powerful, but because of the inherent nature of JavaScript, can be too wide (see the cons).</li>
<li>Smart HTML, CSS (and SCSS) editing, with good auto-completion and formatting.</li>
<li>Good editing capabilities, including column (rectangular) selection mode and drag&#x2019;n&#x2019;drop of text.</li>
<li>Good, fast open resource (Ctrl+Shift+R) facility with real-time list of matching names, and pre-selection of recently / frequently used files. Compensates a bit the issue with tabs (see below).</li>
<li>Good, clear project management: you just import a directory, and mark some folders as excluded (generated files like target), or resource. They are marked with colors in the project tree.<br>
Colors are also used by the VCS to mark new files, changed files, etc.</li>
<li>Natively knows lot of Web languages (JS, Dart, Typescript, Coffeescript), markup (CSS, HTML, XML, Json, Yaml&#x2026;) and tools (Gherkin, HAML, LESS, SASS, SCSS, etc.).</li>
<li>Good analysis of code, with hints, eg. when we forget a semi-colon, or errors (sometime too discrete).</li>
<li>Support of Emmet in HTML and CSS. For example, if we type, in an HTML editor, table&gt;thead&gt;tr&gt;th<em>8^^^tbody&gt;tr</em>5&gt;td*8 then Tab, we get a full HTML table with headers (8 columns) and body (5 rows).</li>
<li>Shortcut to view the current HTML file in any main browser.</li>
</ul>
<p>CONS</p>
<ul>
<li>I am often confused with Tab management. Perhaps I am too used to Eclipse, where I can have lot of open tabs: I have a drop-down list of these tabs, where I can type the first letter to quickly find the editor I want. WS has the same drop-down, but only shows there non-displayed tabs (instead of all of them), and isn&#x2019;t searchable (apparently). The concept of non-displayed is fuzzy too, as some tabs are out of view and I have to scroll them (with the mouse wheel) to see them.<br>
So I don&#x2019;t know if a tab is out of view or non-displayed. I find myself relying on the Project view (hierarchical) to switch between two related files (eg. controller and template), but they are relatively far spaced there, so I scroll a lot, and have to double-click on a file name (even if already opened) to switch to it.<br>
PS.: I just found out I can have tabs on several rows, I will try this disposition.<br>
I find myself loosing lot of time on this. A little pro thought: it is easy to move a tab to put it close to the related one. At least when both are visible!</li>
<li>auto-completion sometime kicks in automatically in the middle of typing an identifier, and sometime it can be annoying as it might freeze completely WebStorm: I get a spinning cursor and I have to wait for several dozens of seconds before being able to resume the typing. I think there is an open bug on this topic.</li>
<li>Lot of operations like auto-completion rely on Node.js for parsing JavaScript and providing a database of identifiers. The Node.js instance can grow enormous (near a gigabyte of memory) and is likely the culprit for the freezing described above.</li>
<li>Renaming a non-local identifier is greedy: it will find all occurrences of this string in the project (can include strings and comments) and will propose all of them. It can be slow (see above) and we have to examine each occurrence. This encourages to use unique names: if we have to data stores, for example, instead of naming the Crud methods with generic names (create, update, delete, etc.), it is better to name them to the specific objects they operate on (createFoo, updateFoo, deleteFoo&#x2026;). This eases auto-completion and renaming by narrowing the possible occurrences.</li>
<li>Bad management of Azerty keyboard: commenting code can be made with Ctrl+/ where / is shifted on my keyboard. I can&#x2019;t get it to work&#x2026; I just mapped the command to one I use in SciTE, anyway.</li>
</ul>
<p>I hadn&#x2019;t time to test how to debug JavaScript within WS, but it also something it can do.</p>
<p>Overall, I am quite impressed by this IDE, which has a deep knowledge of the Web environment, offers good editing facilities and is very pleasant to use.</p>
]]></content>
    <summary type="html">
    <![CDATA[a review of the WebStorm IDE for Web applications, at version 9]]>
    
    </summary>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/tags/ide/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/tags/software/"/>
    
      <category term="Tool" scheme="http://PhiLhoSoft.github.io/tags/tool/"/>
    
      <category term="Software" scheme="http://PhiLhoSoft.github.io/categories/software/"/>
    
      <category term="IDE" scheme="http://PhiLhoSoft.github.io/categories/software/ide/"/>
    
  </entry>
  
</feed>
